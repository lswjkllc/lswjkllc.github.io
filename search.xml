<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Docker错误集锦及解决方法</title>
      <link href="/2020/03/08/Docker%E9%94%99%E8%AF%AF%E9%9B%86%E9%94%A6%E5%8F%8A%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"/>
      <url>/2020/03/08/Docker%E9%94%99%E8%AF%AF%E9%9B%86%E9%94%A6%E5%8F%8A%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>本文主要记录一些在使用<code>Docker</code>的过程中遇到的问题，及其解决方法。</p><a id="more"></a><hr><h3 id="错误一"><a href="#错误一" class="headerlink" title="错误一"></a>错误一</h3><p>执行 “docker-compose up -d” 命令时，出现 “ERROR: Failed to Setup IP tables: Unable to enable SKIP DNAT rule”</p><p>原因：防火墙关闭之后需要 <strong>重启 docker 服务</strong></p><p>解决方法：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$<span class="built_in"> service </span>docker restart</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>位运算和位移运算</title>
      <link href="/2020/03/08/%E4%BD%8D%E8%BF%90%E7%AE%97/"/>
      <url>/2020/03/08/%E4%BD%8D%E8%BF%90%E7%AE%97/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>本文主要介绍在位运算和位移运算的基本概念，涉及到的编程语言为<code>Java</code>。</p><a id="more"></a><hr><h3 id="十进制和二进制"><a href="#十进制和二进制" class="headerlink" title="十进制和二进制"></a>十进制和二进制</h3><p>计算机看似能干很多活，其实也很苯，只认识0和1。因为电路的逻辑只有0和1两个状态，这里的0和1并不是数字的0和1，0和1是表示两种不同的状态，0表示低电平，1表示高电平。计算机是由无数个逻辑电路组成的，通过0和1的无限位数和组合来表达信息。也就是说，计算机是采用二进制来表示数据的。</p><p>下面先说一下我们生活中常用的十进制：</p><p><img src="http://image.chanecho.com/api/img?path=/79/a24702bb65f3b59e8cf8eb06fc8ee5.png" alt="smaple1"></p><p>这是一个普通的十进制数 <strong>八十三万七千零五十六</strong>，可以有如下表示：</p><p><img src="http://image.chanecho.com/api/img?path=/44/330dc90f95e612ac6d3d9d9beeae30.jpg" alt="smaple2"></p><p>再来看看二进制：</p><p><img src="http://image.chanecho.com/api/img?path=/33/c602251f35064521ba08ecdd6a8e24.png" alt="smaple3"></p><p>这是一个二进制数 <strong>101011</strong>，可以做如下变换：</p><p><img src="http://image.chanecho.com/api/img?path=/d2/d0c26fbbf62c445ab8ec4bdf432ab8.png" alt="smaple4"></p><p>二进制和十进制一样，只不过把底数（幂）从 10 变成了 2，用十进制表示二进制里的 <strong>101011</strong> 就是 <strong>43</strong>。</p><p>以 <strong>Java</strong> 为例。在 Java 中，<strong>int</strong> 类型在 Java 中是占 <strong>4 个字节，1 个字节 8 位</strong>，十进制 <strong>43</strong> 的二进制表示如下：</p><p><img src="http://image.chanecho.com/api/img?path=/7f/de5d570d5f23480884fb81470a39ec.png" alt="smaple5"></p><p>其中 </p><ul><li>每段为 1 个字节，一个字节是 8 位，首位表示符号位</li><li>首位如果为 0 表示该数的十进制表示为正数，如果首位为 1 表示该数位负数。</li></ul><hr><h3 id="原码、反码和补码"><a href="#原码、反码和补码" class="headerlink" title="原码、反码和补码"></a>原码、反码和补码</h3><p><strong>原码</strong>：正数的原码是本身，负数的原码是其正数的原码，并将最高位改为 1。</p><p>例如 1，-1，转换为8位的二进制原码</p><ul><li>1 的原码码 = [0000 0001]</li><li>-1 的原码 = [1000 0001]</li></ul><p><strong>反码</strong>：正数的反码是本身，负数的反码是正数的原码每个位置取反（做 非运算）。</p><p>例如 1，-1 转换为 8 位的二进制反码</p><ul><li>1 的反码 = [0000 0001]</li><li>-1 的反码 = [1111 1110]</li></ul><p><strong>补码</strong>：正数的补码是本身，负数的补码是先取其绝对值的反码，然后最后位+1。<strong>正常情况下，对计算机的俩个数进行加法运算，由于不知道符号，所以对其取补码后进行运算</strong>。例如：<strong>在 Java 中，负数是用补码来表示的，也就是其绝对值的反码加 1 得到的</strong>。</p><p>例如 1，-1 转换为 8 位的二进制补码</p><ul><li>1 的补码= [0000 0001]</li><li>-1 的补码 = [1111 1111]，</li></ul><p><em>注意</em>：<strong>已知一个数的补码求原码，就是对补码再求补码</strong></p><hr><h3 id="位运算"><a href="#位运算" class="headerlink" title="位运算"></a>位运算</h3><h4 id="与运算"><a href="#与运算" class="headerlink" title="与运算"></a>与运算</h4><p>与运算是将参与运算的两个二进制数按位依次排好，如果相同的二进制位都是1，则相应二进制位结果为1，其他位全都为 0。</p><ul><li>例如 <code>1 &amp; 2</code>，其中<code>&amp;</code> 符号代表与运算：</li></ul><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">1 </span>    =&gt; [<span class="number">0000</span> <span class="number">0001</span>]</span><br><span class="line"><span class="symbol">2 </span>    =&gt; [<span class="number">0000</span> <span class="number">0010</span>]</span><br><span class="line"><span class="symbol">1 </span>&amp; <span class="number">2</span> =&gt; [<span class="number">0000</span> <span class="number">0000</span>] = <span class="number">0</span></span><br></pre></td></tr></table></figure><h4 id="或运算"><a href="#或运算" class="headerlink" title="或运算"></a>或运算</h4><p>与运算是将参与运算的两个二进制数按位依次排好，如果相同的二进制位中，只要有 1 个是 1，那么相应二进制位结果为 1，如果 2 个二进制位都是 0则表示 0。</p><ul><li>例如 <code>1 | 2</code>，其中<code>|</code> 符号代表或运算：</li></ul><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">1 </span>    =&gt; [<span class="number">0000</span> <span class="number">0001</span>]</span><br><span class="line"><span class="symbol">2 </span>    =&gt; [<span class="number">0000</span> <span class="number">0010</span>]</span><br><span class="line"><span class="symbol">1 </span>| <span class="number">2</span> =&gt; [<span class="number">0000</span> <span class="number">0011</span>] = <span class="number">3</span></span><br></pre></td></tr></table></figure><h4 id="非运算（取反运算）"><a href="#非运算（取反运算）" class="headerlink" title="非运算（取反运算）"></a>非运算（取反运算）</h4><p><strong>非运算</strong> 和 <strong>反码</strong> 是相同的操作。但是</p><ul><li>例如<code>~0</code>，其中<code>~</code>符号代表非运算：</li></ul><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span>   =&gt;  [<span class="number">0000</span> <span class="number">0000</span>]</span><br><span class="line">~<span class="number">0</span>  =&gt;  [<span class="number">1111</span> <span class="number">1111</span>]（补码）</span><br><span class="line">    # 补码 进行除符号位其他取反加 <span class="number">1</span> 操作，可以得到其 原码</span><br><span class="line">    =&gt;  [<span class="number">1000</span> <span class="number">0001</span>] = <span class="number">-1</span></span><br></pre></td></tr></table></figure><h4 id="异或运算"><a href="#异或运算" class="headerlink" title="异或运算"></a>异或运算</h4><p>异或运算是将参与运算的两个二进制数按位依次排好，如果相同的二进制位都是 0 或者都是 1，那么相应二进制位结果为 0，否则为 1。</p><ul><li>例如<code>1 ^ 2</code>，其中<code>^</code>符号代表异或运算：</li></ul><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">1 </span>    =&gt; [<span class="number">0000</span> <span class="number">0001</span>]</span><br><span class="line"><span class="symbol">2 </span>    =&gt; [<span class="number">0000</span> <span class="number">0010</span>]</span><br><span class="line"><span class="symbol">1 </span>^ <span class="number">2</span> =&gt; [<span class="number">0000</span> <span class="number">0011</span>] = <span class="number">3</span></span><br></pre></td></tr></table></figure><hr><h3 id="移位运算"><a href="#移位运算" class="headerlink" title="移位运算"></a>移位运算</h3><p>以下涉及语言皆为 <strong>Java</strong>。</p><h4 id="左移运算符：-lt-lt"><a href="#左移运算符：-lt-lt" class="headerlink" title="左移运算符：&lt;&lt;"></a>左移运算符：&lt;&lt;</h4><p>先随便定义一个 int 类型的数，十进制的<code>value = 733183670</code>，转换成二进制在计算机中的表示如下：</p><p><img src="http://image.chanecho.com/api/img?path=/9e/a83858a939ba0ae6595b110bd67e4f.jpg" alt="smaple6"></p><p>value &lt;&lt; 1，左移 1 位：</p><p><img src="http://image.chanecho.com/api/img?path=/c3/899c923900a0cac30c0e198d0dd689.jpg" alt="smaple7"></p><p>左移 1 位后换算成十进制的值为：1466367340，刚好是 733183670 的两倍， 有些人在乘 2 操作时喜欢用左移运算符来替代，即：<code>value &lt;&lt; 1 = value * 2</code>。</p><p>value &lt;&lt; 8，左移 8 位看一下：</p><p><img src="http://image.chanecho.com/api/img?path=/d4/3bdaad17c22ea952b93a3c056893f7.jpg" alt="smaple8"></p><p>左移 8 位后变成了十进制的值为：-1283541504，移动 8 位后，由于首位变成了 1，也就是说成了负数，在使用中要考虑变成负数的情况。</p><p>根据这个规则，左移32位后，右边补上 32 个 0 值是不是就变成了十进制的 0 了？<strong>答案是NO，</strong>当 int 类型进行左移操作时，<strong>左移位数大于等于 32 位操作时，会先求余（%）后再进行左移操作。</strong>也就是说左移 32 位相当于不进行移位操作，左移 40 位相当于左移8位（40%32=8）。当long类型进行左移操作时，long类型在二进制中的体现是64位的，因此求余操作的基数也变成了64，也就是说左移64位相当于没有移位，左移72位相当于左移8位（72%64=8）。</p><p><em>注意</em>：<strong>由于 double，float 在二进制中的表现比较特殊，因此不能来进行移位操作</strong></p><p>综上所述：左移 &lt;&lt; 其实很简单，也就是说 <strong>丢弃左边指定位数，右边补0</strong>。</p><h4 id="右移运算符：-gt-gt"><a href="#右移运算符：-gt-gt" class="headerlink" title="右移运算符：&gt;&gt;"></a>右移运算符：&gt;&gt;</h4><p>还是这个数：<strong>733183670</strong></p><p><img src="http://image.chanecho.com/api/img?path=/9e/a83858a939ba0ae6595b110bd67e4f.jpg" alt="smaple9"></p><p>value &gt;&gt; 1，右移 1 位：</p><p><img src="http://image.chanecho.com/api/img?path=/ad/336d1df32a494fb713f9dce00c328d.jpg" alt="smaple10"></p><p>右移 1 位后换算成十进制的值为：366591835，刚好是 733183670 的 1 半， 有些人在除 2 操作时喜欢用右移运算符来替代，即：<code>value &gt;&gt; 1 = value / 2</code>（自动向下取整）。</p><p>value &gt;&gt; 8，右移 8 位看一下：</p><p><img src="http://image.chanecho.com/api/img?path=/fe/d239804df45b73f1ebf36f47610715.jpg" alt="smaple11"></p><p>和左移一样，int 类型移位大于等于 32 位时，long 类型大于等于 64 位时，会先做求余处理再移位处理，byte，short移位前会先转换为int类型（32位）再进行移位。以上是正数的移位，我们再来看看负数的右移运算，如图，负数int_value: -733183670 的二进制表现如下图：</p><p><img src="http://image.chanecho.com/api/img?path=/b1/1cdb3a83d85d2d0ec84c68e2295689.jpg" alt="smaple12"></p><p>int_value &gt;&gt; 8，右移 8 位：</p><p><img src="http://image.chanecho.com/api/img?path=/d2/1bccd9ee7900199ac4a3de805bb96d.jpg" alt="smaple13"></p><p>综上所述：右移运算符&gt;&gt;的运算规则也很简单，<strong>丢弃右边指定位数，左边补上符号位</strong>。</p><h4 id="无符号右移运算符：-gt-gt-gt"><a href="#无符号右移运算符：-gt-gt-gt" class="headerlink" title="无符号右移运算符：&gt;&gt;&gt;"></a>无符号右移运算符：&gt;&gt;&gt;</h4><p>无符号右移运算符<code>&gt;&gt;&gt;</code>和右移运算符<code>&gt;&gt;</code>是一样的，只不过右移时左边是补上 <strong>符号位</strong>，而无符号右移运算符是补上 <strong>0</strong>，也就是说，对于正数移位来说等同于：<code>&gt;&gt;</code>，负数通过此移位运算符能移位成正数。</p><p>以 int_value: -733183670 &gt;&gt;&gt; 8（无符号右移 8 位）为例来画一下图：</p><p><img src="http://image.chanecho.com/api/img?path=/1f/c2ccb4c233411de1fdef8b4fb19e08.jpg" alt="smaple14"></p><p>无符号右移运算符<code>&gt;&gt;&gt;</code>的运算规则也很简单，<strong>丢弃右边指定位数，左边补上0</strong>。</p><hr><p>参考链接：</p><ul><li><a href="https://zhuanlan.zhihu.com/p/30108890" target="_blank" rel="noopener">Java 中的移位运算符</a></li><li><a href="https://www.jianshu.com/p/67baa55d75ea" target="_blank" rel="noopener">Java 运算符</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 位运算 </tag>
            
            <tag> 位移运算 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安装docker</title>
      <link href="/2020/03/08/Docker%E5%AE%89%E8%A3%85/"/>
      <url>/2020/03/08/Docker%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>本文主要介绍<code>Docker</code>在<code>centos</code>和<code>ubuntu</code>两个操作系统下的安装方法。</p><a id="more"></a><hr><h3 id="centos-安装-docker"><a href="#centos-安装-docker" class="headerlink" title="centos 安装 docker"></a>centos 安装 docker</h3><p>docker 支持以下的 centos 版本：</p><p>​    docker 运行在 centos 7 上，要求系统为64位、系统内核版本为 3.10 以上；<br>​    docker 运行在 centos-6.5 或更高的版本的 centos 上，要求系统为64位、系统内核版本为 2.6.32-431 或者更高版本。</p><p>用以下命令查看<strong>系统版本</strong>及<strong>内核版本</strong>：</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看 centos 版本</span></span><br><span class="line"><span class="variable">$ </span>cat /etc/redhat-release</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看当前的内核版本</span></span><br><span class="line"><span class="variable">$ </span>uname -r</span><br></pre></td></tr></table></figure><p>以下提供两种在 centos 中的安装方法</p><h4 id="1、使用-yum-安装（centos7下）"><a href="#1、使用-yum-安装（centos7下）" class="headerlink" title="1、使用 yum 安装（centos7下）"></a>1、使用 yum 安装（centos7下）</h4><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 确保 yum 包更新到最新</span></span><br><span class="line">$ yum update</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 Docker</span></span><br><span class="line">$ sudo yum -y install docker</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动 Docker 后台服务</span></span><br><span class="line">$ sudo<span class="built_in"> service </span>docker start</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看 docker 版本</span></span><br><span class="line">$ docker version</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置开启自启动</span></span><br><span class="line">$ sudo systemctl <span class="builtin-name">enable</span> docker</span><br></pre></td></tr></table></figure><h4 id="2、使用脚本安装"><a href="#2、使用脚本安装" class="headerlink" title="2、使用脚本安装"></a>2、使用脚本安装</h4><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 确保 yum 包更新到最新</span></span><br><span class="line"><span class="variable">$ </span>yum update</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行 docker 安装脚本,执行这个脚本会添加 docker.repo 源并安装 docker</span></span><br><span class="line"><span class="variable">$ </span>sudo curl -fsSL <span class="symbol">https:</span>/<span class="regexp">/get.docker.com/</span> | sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动 Docker 进程</span></span><br><span class="line"><span class="variable">$ </span>sudo service docker start</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看 docker 版本</span></span><br><span class="line"><span class="variable">$ </span>docker version</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置开启自启动</span></span><br><span class="line"><span class="variable">$ </span>sudo systemctl enable docker</span><br></pre></td></tr></table></figure><h3 id="ubuntu-安装-docker"><a href="#ubuntu-安装-docker" class="headerlink" title="ubuntu 安装 docker"></a>ubuntu 安装 docker</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 更新软件包到最新</span></span><br><span class="line">$ sudo apt-<span class="builtin-name">get</span> update</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 docker</span></span><br><span class="line">$ sudo apt-<span class="builtin-name">get</span> install docker</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动 Docker 进程</span></span><br><span class="line">$ sudo<span class="built_in"> service </span>docker start</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看 docker 版本</span></span><br><span class="line">$ docker version</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置开启自启动</span></span><br><span class="line">$ sudo systemctl <span class="builtin-name">enable</span> docker</span><br></pre></td></tr></table></figure><h3 id="建立-docker-用户组"><a href="#建立-docker-用户组" class="headerlink" title="建立 docker 用户组"></a>建立 docker 用户组</h3><p>默认情况下，<strong>docker命令</strong> 会使用 <strong>Unix socket *<em>与 *</em>docker引擎</strong> 通讯。而只有 <strong>root</strong> 用户和 <strong>docker</strong> 组的用户才可以访问 docker 引擎的 Unix socket。出于安全考虑，一般 Linux 系统上不会直接使用 <strong>root</strong> 用户。因此，更好地做法是将需要使用 <strong>docker 用户</strong> 加入 <strong>docker 用户组</strong>。</p><p>建立 docker 组：</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>sudo groupadd docker</span><br></pre></td></tr></table></figure><p>将当前用户加入 docker 组：</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>sudo usermod -aG docker <span class="variable">$USER</span></span><br></pre></td></tr></table></figure><p>最后，退出当前终端，并重新登录。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pytorch学习笔记</title>
      <link href="/2020/03/08/pytorch%E7%AC%94%E8%AE%B0/"/>
      <url>/2020/03/08/pytorch%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>本文主要介绍<code>pytorch</code>框架的一些基本层和常用函数的使用</p><a id="more"></a><hr><h3 id="导入基本库"><a href="#导入基本库" class="headerlink" title="导入基本库"></a>导入基本库</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> optim</span><br><span class="line"><span class="keyword">from</span> torch.nn <span class="keyword">import</span> functional <span class="keyword">as</span> F</span><br><span class="line"><span class="keyword">from</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> math</span><br></pre></td></tr></table></figure><h3 id="一、层的使用"><a href="#一、层的使用" class="headerlink" title="一、层的使用"></a>一、层的使用</h3><h4 id="1、nn-Embedding"><a href="#1、nn-Embedding" class="headerlink" title="1、nn.Embedding"></a>1、nn.Embedding</h4><h5 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">embed = nn.Embedding(num_embeddings=<span class="number">1000</span>, embedding_dim=<span class="number">300</span>)</span><br></pre></td></tr></table></figure><ul><li>初始化：<code>num_embeddings</code>表示需要表达的<code>事物</code>的总数。如果我想将<code>1000</code>个单词使用<code>embedding</code>表达，就可以将第一个参数 <code>num_embeddings</code>设置为<code>1000</code>。</li><li><code>embedding_dim</code>表示将一个需要表达的<code>事物</code>转变为一个<code>embedding</code>的维度。这个参数时自定义的，在实际应用中，一般设置为：<code>50、100、200、300</code>。</li><li>其他参数使用默认值即可。</li><li>如果需要使用已经初始化或者预训练好的<code>nn.Embedding</code>对象，可以使用如下函数进行加载：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 初始化一个值全为 1 的 1000 * 300 二维数组</span></span><br><span class="line">exist_data = np.ones([<span class="number">1000</span>, <span class="number">300</span>])</span><br><span class="line"><span class="comment"># 初始化</span></span><br><span class="line">embed = nn.Embedding(num_embeddings=<span class="number">1000</span>, embedding_dim=<span class="number">300</span>)</span><br><span class="line"><span class="comment"># 导入已存在的数据</span></span><br><span class="line">embed.weight.data.copy_(torch.from_numpy(exist_data))</span><br></pre></td></tr></table></figure><ul><li>从上面的实例中可以看出，<code>nn.Embedding</code>的两个参数，其实就是它的权重<code>weight</code>的维度。</li></ul><h5 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 准备一个 3 * 2 维的变量：N * M</span></span><br><span class="line">inp = torch.arange(<span class="number">0</span>, <span class="number">6</span>).view(<span class="number">3</span>, <span class="number">2</span>).long()</span><br><span class="line">inp = torch.autograd.Variable(inp)</span><br><span class="line"><span class="comment"># 使用，输出维度：3 * 2 * 300（N * M * embedding_dim）</span></span><br><span class="line">out = embedding(inp)</span><br></pre></td></tr></table></figure><ul><li>解读：输入<code>1000</code>个词，每个词用<code>300</code>维向量表征，对应的权重就是一个<code>1000 * 300</code>的矩阵。如果<code>Embedding</code>层的输入形状为<code>N * M</code>（<code>N</code>是<code>batch size</code>，<code>M</code>是序列的长度），则输出的形状是<code>N * M * embedding_dim</code>。</li><li>注意：输入必须是 <code>LongTensor</code>，<code>FloatTensor</code>须通过<code>tensor.long()</code>方法转成<code>LongTensor</code>。</li></ul><h4 id="2、nn-Dropout"><a href="#2、nn-Dropout" class="headerlink" title="2、nn.Dropout"></a>2、nn.Dropout</h4><ul><li>一个剪枝对象，用于随机减小模型的复杂度，降低过拟合的风险</li><li>在训练过程中，使用来自伯努利分布的样本，用概率<code>p</code>随机地将输入张量的一些元素归零。</li><li>这已被证明是一种有效的正则化和防止神经元的协同适应的技术，如文中所述，通过防止特征检测器的协同适应来改进神经网络。</li><li>此外，在训练过程中，输出按<code>1 / (1 - p)</code>的系数伸缩。这意味着在计算过程中，该模块只计算一个<code>identity function</code>。</li></ul><h5 id="初始化-1"><a href="#初始化-1" class="headerlink" title="初始化"></a>初始化</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drop_out = nn.Dropout(p=<span class="number">0.5</span>, inplace=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><ul><li><code>p</code>：元素归零的概率。 默认值：<code>0.5</code>。</li><li><code>inplace</code>：如果设置为<code>True</code>，则将就地执行此操作。 默认值：<code>False</code>。</li></ul><h5 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 随机生成</span></span><br><span class="line">a = torch.randn(<span class="number">4</span>)    <span class="comment"># [-1.0765,  1.5988, -1.4106, -0.2941]</span></span><br><span class="line">b = drop_out(a)</span><br><span class="line"><span class="comment"># [-0.0000,  3.1976, -2.8213, -0.0000]</span></span><br><span class="line">print(b)</span><br></pre></td></tr></table></figure><h4 id="3、nn-Conv1d"><a href="#3、nn-Conv1d" class="headerlink" title="3、nn.Conv1d"></a>3、nn.Conv1d</h4><h5 id="初始化Conv1d层-一维卷积层-，一般用于文本分类，提取文本的特征"><a href="#初始化Conv1d层-一维卷积层-，一般用于文本分类，提取文本的特征" class="headerlink" title="初始化Conv1d层(一维卷积层)，一般用于文本分类，提取文本的特征"></a>初始化<code>Conv1d</code>层(一维卷积层)，一般用于文本分类，提取文本的特征</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conv1d = nn.Conv1d(in_channels=<span class="number">300</span>, out_channels=<span class="number">50</span>, kernel_size=<span class="number">3</span>, padding=<span class="number">1</span>, stride=<span class="number">1</span>, dilation=<span class="number">1</span>)</span><br></pre></td></tr></table></figure><ul><li><code>in_channels</code>(<code>int</code>)：输入信号的通道。在文本分类中，即为词向量的维度。</li><li><code>out_channels</code>(<code>int</code>)：卷积产生的通道。有多少个out_channels，就需要多少个<code>1</code>维卷积。</li><li><code>kernel_size</code>(<code>int</code> or <code>tuple</code>)：卷积核的尺寸，卷积核的大小为(<code>k</code>, <code>k</code>)。</li><li><code>padding</code> (<code>int</code> or <code>tuple</code>, <code>optional</code>)：输入的每一条边补充<code>0</code>的层数，默认值为<code>0</code>。</li><li><code>stride</code>(<code>int</code> or <code>tuple</code>, <code>optional</code>)：卷积步长，一般默使用默认值<code>1</code>。</li><li><code>dilation</code>(<code>int</code> or <code>tuple</code>, <code>optional</code>)：卷积核元素之间的间距，一般使用默认值<code>1</code>。</li><li>其他参数，一般使用默认值</li></ul><h5 id="使用-2"><a href="#使用-2" class="headerlink" title="使用"></a>使用</h5><ul><li>输入：<code>3 * 300 * 2</code>(<code>batch_size * in_channels * Lin</code>)</li><li>输出：<code>3 * 50 * Lout</code>(<code>batch_size * out_channels * Lout</code>)</li><li>其中，<code>batch_size</code>、<code>in_channels</code>、<code>out_channels</code>、<code>Lin</code>是已知的值， <code>Lout</code>需要计算，计算公式如下：</li></ul><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">公式：Lout = floor((Lin + <span class="number">2</span> * padding - dilation * (kernelSize - <span class="number">1</span>) - <span class="number">1</span>) / stride) + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">一般情况下：dilation = <span class="number">1</span>（默认），stride = <span class="number">1</span>（默认），简化后的公式如下：</span><br><span class="line">    Lout = Lin - kernelSize + <span class="number">1</span> + <span class="number">2</span> * padding</span><br></pre></td></tr></table></figure><ul><li>举个例子：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 初始化</span></span><br><span class="line">conv1 = nn.Conv1d(in_channels=<span class="number">300</span>，out_channels=<span class="number">50</span>, kernel_size=<span class="number">3</span>)</span><br><span class="line"><span class="comment"># 原始的输入：batch_size * Lin * in_channels =&gt; 32 * 35 * 256</span></span><br><span class="line">inp = torch.randn(<span class="number">32</span>, <span class="number">35</span>, <span class="number">256</span>)</span><br><span class="line"><span class="comment"># 需要的输入：batch_size * in_channels * Lin =&gt; 32 * 256 * 35</span></span><br><span class="line">inp = inp.permute(<span class="number">0</span>, <span class="number">2</span>, <span class="number">1</span>)</span><br><span class="line"><span class="comment"># 输出：batch_size * out_channels * Lout =&gt; 32 * 50 * 33</span></span><br><span class="line"><span class="comment"># 其中：Lout = (35 + 2 * 0 - 1 * (3 - 1) - 1) / 1 + 1 = 33</span></span><br><span class="line">out = conv1(inp)</span><br><span class="line">print(out.size())    <span class="comment"># 32 * 50 * 33</span></span><br></pre></td></tr></table></figure><h4 id="4、nn-LSTM"><a href="#4、nn-LSTM" class="headerlink" title="4、nn.LSTM"></a>4、nn.LSTM</h4><h5 id="初始化-2"><a href="#初始化-2" class="headerlink" title="初始化"></a>初始化</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lstm = nn.LSTM(input_size=<span class="number">300</span>, hidden_size=<span class="number">100</span>, num_layers=<span class="number">1</span>, batch_first=<span class="literal">True</span>, bidirectional=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><ul><li><code>input_size</code>: 特征的维度</li><li><code>hidden_size</code>: 隐藏层状态的维数，即隐藏层节点的个数，这个和单层感知器的结构是类似的。自定义。</li><li><code>num_layers</code>: <code>LSTM</code>隐层的层数，默认值是<code>1</code>层，如果设置为<code>2</code>，第二个<code>LSTM</code>接收第一个<code>LSTM</code>的计算结果。</li><li><code>batch_first</code>: 输入输出的第一维是否为<code>batch_size</code>，默认值<code>False</code>。</li><li><code>bidirectional</code>: 是否是双向<code>RNN</code>，默认为<code>false</code>，若为<code>true</code>，则<code>num_directions</code> = <code>2</code>，否则为 <code>1</code>。</li></ul><h5 id="使用-3"><a href="#使用-3" class="headerlink" title="使用"></a>使用</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 随机生成数据</span></span><br><span class="line">torch.manual_seed(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义一层的LSTM神经网络</span></span><br><span class="line">lstm = nn.LSTM(<span class="number">3</span>, <span class="number">2</span>)  <span class="comment"># Input dim is 3, output dim is 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成一个序列长度为5的数据，一个点看成是一个时刻</span></span><br><span class="line">inputs = [torch.randn(<span class="number">1</span>, <span class="number">3</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">5</span>)]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化 隐藏状态，</span></span><br><span class="line"><span class="comment">#   LSTM层数为: 1</span></span><br><span class="line"><span class="comment">#   batch为: 1</span></span><br><span class="line"><span class="comment">#   hidden_size: 1</span></span><br><span class="line"><span class="comment"># initialize the hidden state.</span></span><br><span class="line">hidden = (torch.randn(<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>),</span><br><span class="line">          torch.randn(<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第一种获取输出的方式，循环多个时间步，得到每个时刻的输出</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> inputs:</span><br><span class="line">    <span class="comment"># Step through the sequence one element at a time.</span></span><br><span class="line">    <span class="comment"># after each step, hidden contains the hidden state.</span></span><br><span class="line">    out, hidden = lstm(i.view(<span class="number">1</span>, <span class="number">1</span>, <span class="number">-1</span>), hidden)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第二种获取输出的方式，把输入格式变为：seq_len, batch, input_size 的三维张量</span></span><br><span class="line">inputs = torch.cat(inputs).view(len(inputs), <span class="number">1</span>, <span class="number">-1</span>)</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">tensor([[[ 0.3482,  1.1371, -0.3339]],</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        [[-1.4724,  0.7296, -0.1312]],</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        [[-0.6368,  1.0429,  0.4903]],</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        [[ 1.0318, -0.5989,  1.6015]],</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        [[-1.0735, -1.2173,  0.6472]]])</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line">hidden = (torch.randn(<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>), torch.randn(<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>))  <span class="comment"># clean out hidden state</span></span><br><span class="line">out, hidden = lstm(inputs, hidden)</span><br><span class="line">print(out)</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">tensor([[[-0.0468,  0.1818]],</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        [[-0.1173,  0.1622]],</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        [[-0.2076,  0.1286]],</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        [[-0.0474,  0.0851]],</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        [[-0.0185,  0.1172]]], </span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">print(<span class="string">"h的最后一个值等于output的最后一个值"</span>)</span><br><span class="line">print(hidden)</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">h: tensor([[[-0.0185,  0.1172]]], grad_fn=&lt;StackBackward&gt;)</span></span><br><span class="line"><span class="string">c: tensor([[[-0.0603,  0.1560]]], grad_fn=&lt;StackBackward&gt;)</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><ul><li><code>pytorch</code>中的<code>LSTM</code>有三个输出<code>output, hn, cn</code>。</li><li>可以把<code>hn</code>理解为当前时刻，<code>LSTM</code>层的输出结果，而<code>cn</code>是<code>记忆单元</code>中的值，<code>output</code>则是包括当前时刻以及之前时刻所有<code>hn</code>的输出值。<ul><li>在只有单时间步的时候，<code>output = hn</code>。</li><li>在多时间步时，<code>output</code>可以看做是各个时间点hn的输出。</li></ul></li></ul><h4 id="5、nn-Linear"><a href="#5、nn-Linear" class="headerlink" title="5、nn.Linear"></a>5、nn.Linear</h4><ul><li><code>Linear</code>层，也叫<em>全连接层</em></li><li>在<code>CNN</code>中，全连接常出现在最后几层，用于对前面设计的特征做加权和。比如<code>mnist</code>，前面的卷积和池化相当于做特征工程，后面的全连接相当于做特征加权。<ul><li>卷积相当于全连接的有意弱化，按照局部视野的启发，把局部之外的弱影响直接抹为零影响。弱化使参数变少，节省计算量，又专攻局部不贪多求全。</li><li>另外还做了一点强制，不同的局部所使用的参数居然一致。强制进一步减少参数。少即是多</li></ul></li><li>在<code>RNN</code>中，全连接用来把<code>embedding</code>空间拉到隐层空间，把隐层空间转回<code>label</code>空间等。</li></ul><h5 id="初始化-3"><a href="#初始化-3" class="headerlink" title="初始化"></a>初始化</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hidden2tag = nn.Linear(in_features=<span class="number">30</span>, out_features=<span class="number">20</span>)</span><br></pre></td></tr></table></figure><ul><li><code>in_features</code>表示输入的特征维度，<code>out_features</code>表示输出的维度</li></ul><h5 id="使用-4"><a href="#使用-4" class="headerlink" title="使用"></a>使用</h5><ul><li>输入：<code>128 * 30</code>（<code>batch_size * in_features</code>）</li><li>输出：<code>128 * 20</code>（<code>batch_size * out_features</code>）</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 输入</span></span><br><span class="line">inp = torch.randn(<span class="number">128</span>, <span class="number">30</span>)  <span class="comment"># 输入的维度是（128，30）</span></span><br><span class="line"><span class="comment"># 使用 nn.Linear 层</span></span><br><span class="line">out = hidden2tag(inp)</span><br><span class="line">print(<span class="string">'m.weight.shape:\n '</span>, hidden2tag.weight.shape)    <span class="comment"># 20 * 30</span></span><br><span class="line">print(<span class="string">'m.bias.shape:\n'</span>, hidden2tag.bias.shape)         <span class="comment"># 20</span></span><br><span class="line">print(<span class="string">'output.shape:\n'</span>, out.shape)                     <span class="comment"># 128 * 20</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ans = torch.mm(input,torch.t(m.weight)) + m.bias 等价于下面的</span></span><br><span class="line">ans = torch.mm(inp, hidden2tag.weight.t()) + hidden2tag.bias   </span><br><span class="line">print(<span class="string">'ans.shape:\n'</span>, ans.shape)</span><br><span class="line"></span><br><span class="line">print(torch.equal(ans, out))                           <span class="comment"># True</span></span><br></pre></td></tr></table></figure><ul><li>为什么<code>hidden2tag.weight.shape = 20 * 30</code>？<br>答：因为线性变换的公式是：<code>y = x * A_T + b</code><br>先生成一个<code>(30, 20)</code>的<code>weight</code>，实际运算中再转置，这样就能和<code>x</code>做矩阵乘法了</li></ul><h4 id="6、nn-CrossEntropyLoss"><a href="#6、nn-CrossEntropyLoss" class="headerlink" title="6、nn.CrossEntropyLoss"></a>6、nn.CrossEntropyLoss</h4><ul><li><code>nn.CrossEntropyLoss()</code>这个损失函数用于多分类问题虽然说的是交叉熵，但是和我理解的交叉熵不一样。</li><li><code>nn.CrossEntropyLoss()</code>是<code>nn.logSoftmax()</code>和<code>nn.NLLLoss()</code>的整合，可以直接使用它来替换网络中的这两个操作。下面会有具体的例子来证明这个说法。</li></ul><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># nn.CrossEntropyLoss() 的计算公式</span><br><span class="line">loss(x, <span class="keyword">class</span>) = −<span class="symbol">log</span>(<span class="symbol">exp</span>(<span class="symbol">x</span>[<span class="symbol">class</span>]) / ∑<span class="symbol">_j</span> <span class="symbol">exp</span>(<span class="symbol">x</span>[<span class="symbol">j</span>])) </span><br><span class="line">               = −<span class="symbol">x</span>[<span class="symbol">class</span>] + <span class="symbol">log</span>(∑<span class="symbol">_j</span> <span class="symbol">exp</span>(<span class="symbol">x</span>[<span class="symbol">j</span>]))</span><br><span class="line"></span><br><span class="line"># 损失函数中也有权重<span class="symbol">weight</span>参数设置，若设置权重，则有如下公式</span><br><span class="line"><span class="symbol">loss</span>(<span class="symbol">x, <span class="symbol">class</span></span>)= <span class="symbol">weight</span>[<span class="symbol">class</span>](−<span class="symbol">x</span>[<span class="symbol">class</span>] + <span class="symbol">log</span>(∑<span class="symbol">_j</span> <span class="symbol">exp</span>(<span class="symbol">x</span>[<span class="symbol">j</span>])))</span><br></pre></td></tr></table></figure><ul><li>注意这里的标签值<code>class</code>，并不参与直接计算，而是作为一个索引，索引对象为实际类别。</li></ul><h5 id="初始化-4"><a href="#初始化-4" class="headerlink" title="初始化"></a>初始化</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">loss = nn.CrossEntropyLoss()</span><br></pre></td></tr></table></figure><h5 id="使用-5"><a href="#使用-5" class="headerlink" title="使用"></a>使用</h5><ul><li>举个栗子，我们一共有三种类别，批量大小为<code>1</code>（为了好计算），那么输入<code>size</code>为<code>（1,3）</code>，具体值为<code>torch.Tensor([[-0.7715, -0.6205,-0.2562]])</code>。标签值<code>torch.tensor([0])</code>，这里标签值为<code>0</code>，表示属于第<code>0</code>类。loss计算如下：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用 nn.CrossEntropyLoss() 对象计算损失 ----------------</span></span><br><span class="line"><span class="comment"># 1 * 3 维的输入</span></span><br><span class="line">inp = torch.Tensor([[<span class="number">-0.7715</span>, <span class="number">-0.6205</span>,<span class="number">-0.2562</span>]])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 标签值，这里标签值为 0，表示属于第 0 类</span></span><br><span class="line"><span class="comment"># torch.tensor 是函数，根据输入数据类型返回对应的数据类型 Tensor 对象</span></span><br><span class="line"><span class="comment"># torch.Tensor 是类，torch.FloatTensor 类的别称，默认返回 FloatTensor 对象</span></span><br><span class="line">target = torch.tensor([<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 nn.CrossEntropyLoss 对象计算</span></span><br><span class="line">out = loss(inp, target)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 最后的输出：tensor(1.3447)</span></span><br><span class="line">print(out)</span><br></pre></td></tr></table></figure><ul><li>下面我们可以手动计算一下损失：</li></ul><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">out</span> = −<span class="meta">x</span>[0] +<span class="meta"> log(</span>exp(<span class="meta">x</span>[0]) +<span class="meta"> exp(</span><span class="meta">x</span>[1]) +<span class="meta"> exp(</span><span class="meta">x</span>[2])) </span><br><span class="line">    = 0.7715 +<span class="meta"> log(</span>exp(−0.7715) +<span class="meta"> exp(</span>−0.6205) +<span class="meta"> exp(</span>−0.2562)</span><br><span class="line">    = 1.3447266007601868</span><br></pre></td></tr></table></figure><ul><li>再看看是否等价<code>nn.logSoftmax()</code>和<code>nn.NLLLoss()</code>的整合:</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 初始化 nn.LogSoftmax() 对象</span></span><br><span class="line">log_softmax = nn.LogSoftmax()</span><br><span class="line"><span class="comment"># 初始化 nn.NLLLoss() 对象</span></span><br><span class="line">nll_loss = nn.NLLLoss()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 首先对输入进行 nn.LogSoftmax() 处理</span></span><br><span class="line">log_softmax_x = log_softmax(inp)</span><br><span class="line"><span class="comment"># 然后进行 nn.NLLLoss() 处理</span></span><br><span class="line">out = nll_loss(log_softmax_x, target)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 最后的输出：tensor(1.3447)</span></span><br><span class="line">print(out)</span><br></pre></td></tr></table></figure><ul><li>可以看出，<code>nn.LogSoftmax()</code>对输入的操作就是：</li></ul><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">log_softmax_x = log(<span class="name">exp</span>(<span class="name">x</span>) / ∑_i exp(<span class="name">x</span>[i])) </span><br><span class="line">         = x - log(∑_i exp(<span class="name">x</span>[i]))</span><br></pre></td></tr></table></figure><ul><li>由此可得，<code>log_softmax_x = [-1.3447, -1.1937, -0.8294]</code></li><li><code>nn.NLLLoss()</code>的操作是：</li></ul><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">loss[<span class="keyword">class</span>] = −<span class="symbol">w</span>[<span class="symbol">class</span>] * <span class="symbol">x_</span>&#123;<span class="keyword">class</span>,<span class="symbol">y</span>[<span class="symbol">class</span>]&#125;</span><br></pre></td></tr></table></figure><ul><li>这里没有设置权重，也就是权重默认为<code>1</code>。</li><li><code>x_{n,y_n}</code>表示目标类所对应输入<code>x</code>中值。</li><li>因此，当<code>class</code>为<code>0</code>时，<code>loss</code>就为：<code>out = −1 ∗ log_softmax_x[0] = 1.3447</code>。</li><li>由此证明：<code>nn.CrossEntropyLoss()</code>是<code>nn.logSoftmax()</code>和<code>nn.NLLLoss()</code>的整合，可以直接使用它来替换网络中的这两个操作。</li></ul><h4 id="7、nn-MaxPool1d"><a href="#7、nn-MaxPool1d" class="headerlink" title="7、nn.MaxPool1d"></a>7、nn.MaxPool1d</h4><h5 id="初始化-5"><a href="#初始化-5" class="headerlink" title="初始化"></a>初始化</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># class nn.MaxPool1d(kernel_size, stride=None, padding=0, dilation=1, return_indices=False, ceil_mode=False)</span></span><br><span class="line">nn_max_pool1d = nn.MaxPool1d(kernel_size=<span class="number">3</span>, stride=<span class="number">2</span>)</span><br></pre></td></tr></table></figure><ul><li><code>kernel_size</code>：取最大值的窗口大小</li><li><code>stride</code>：窗口的步幅。 默认值为<code>kernel_size</code></li><li><code>padding</code>：在两侧都添加隐式零填充</li><li><code>dilation</code>：控制窗口中元素步幅的参数</li><li><code>return_indices</code>：如果为<code>True</code>，则将返回最大索引以及输出。 以后对<code>torch.nn.MaxUnpool1d</code>有用</li><li><code>ceil_mode</code>： 为<code>True</code>时，将使用<code>ceil</code>而不是<code>floor</code>来计算输出形状</li></ul><h5 id="使用-6"><a href="#使用-6" class="headerlink" title="使用"></a>使用</h5><ul><li>输入：(<code>N, C, Lin</code>)</li><li>输出：(<code>N, C, Lout</code>)</li><li>其中，<code>N、C、Lin</code>都是已知的，<code>Lout</code>的计算公式如下：</li></ul><figure class="highlight openscad"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 当 ceil_mode 为 True 时，<span class="function"><span class="keyword">function</span> =</span> math.<span class="built_in">ceil</span></span><br><span class="line"># 当 ceil_mode 为 False 时，functin = math.<span class="built_in">floor</span></span><br><span class="line">Lout = <span class="function"><span class="keyword">function</span><span class="params">(Lin + <span class="number">2</span> * padding − dilation * <span class="params">(kernel_size − <span class="number">1</span>)</span> − <span class="number">1</span>)</span> / <span class="title">stride</span> + 1</span></span><br></pre></td></tr></table></figure><ul><li>接下来举个例子：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># N * C * Lin = 20 * 16 * 50</span></span><br><span class="line">inp = torch.randn(<span class="number">20</span>, <span class="number">16</span>, <span class="number">50</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># N * C * Lout = 20 * 16 * 24</span></span><br><span class="line"><span class="comment"># Lout = (50 + 2 * 0 - 1 * (3 - 1) - 1) / 2 + 1 = 24</span></span><br><span class="line">out = nn_max_pool1d(inp)</span><br><span class="line"></span><br><span class="line">print(<span class="string">"inp size: &#123;&#125;"</span>.format(inp.size()))</span><br><span class="line">print(<span class="string">"out size: &#123;&#125;"</span>.format(out.size()))</span><br></pre></td></tr></table></figure><ul><li>如果只是想单纯的<code>池化</code>，不需要保存任何状态，<code>nn.MaxPool1d</code>可以使用<code>torch.max_pool1d</code>函数代替：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">out = torch.max_pool1d(inp, kernel_size=<span class="number">3</span>, stride=<span class="number">2</span>)</span><br><span class="line">print(<span class="string">"out size: &#123;&#125;"</span>.format(out.size()))</span><br></pre></td></tr></table></figure><h3 id="二、工具函数"><a href="#二、工具函数" class="headerlink" title="二、工具函数"></a>二、工具函数</h3><h4 id="1、torch-cat"><a href="#1、torch-cat" class="headerlink" title="1、torch.cat"></a>1、torch.cat</h4><ul><li>功能：在给定维度上对输入的张量序列<code>seq</code>进行连接操作。<code>cat</code>是<code>concatnate</code>的意思。</li><li>参数：<code>torch.cat(inputs, dimension=0) -&gt; Tensor</code><ul><li><code>inputs</code> - 任意相同<code>Tensor</code>类型的序列</li><li><code>dimension</code> - 沿着此维连接张量序列。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 2 * 3的张量（矩阵）</span></span><br><span class="line">A = torch.ones(<span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">tensor([[ 1.,  1.,  1.],</span></span><br><span class="line"><span class="string">        [ 1.,  1.,  1.]])</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 4 * 3 的张量（矩阵）</span></span><br><span class="line">B = <span class="number">2</span> * torch.ones(<span class="number">4</span>, <span class="number">3</span>)</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">tensor([[ 2.,  2.,  2.],</span></span><br><span class="line"><span class="string">        [ 2.,  2.,  2.],</span></span><br><span class="line"><span class="string">        [ 2.,  2.,  2.],</span></span><br><span class="line"><span class="string">        [ 2.,  2.,  2.]])</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 按维数 0（行）拼接</span></span><br><span class="line">C = torch.cat((A, B), <span class="number">0</span>)</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">tensor([[ 1.,  1.,  1.],</span></span><br><span class="line"><span class="string">         [ 1.,  1.,  1.],</span></span><br><span class="line"><span class="string">         [ 2.,  2.,  2.],</span></span><br><span class="line"><span class="string">         [ 2.,  2.,  2.],</span></span><br><span class="line"><span class="string">         [ 2.,  2.,  2.],</span></span><br><span class="line"><span class="string">         [ 2.,  2.,  2.]])</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">print(C.size())</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">torch.Size([6, 3])</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2 * 4 的张量（矩阵）</span></span><br><span class="line">D = <span class="number">2</span> * torch.ones(<span class="number">2</span>, <span class="number">4</span>) </span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">tensor([[2.,  2.,  2.,  2.],</span></span><br><span class="line"><span class="string">        [2.,  2.,  2.,  2.]])</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 按维数 1（列）拼接</span></span><br><span class="line">E = torch.cat((A, D), <span class="number">1</span>)</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">tensor([[ 1.,  1.,  1.,  2.,  2.,  2.,  2.],</span></span><br><span class="line"><span class="string">        [ 1.,  1.,  1.,  2.,  2.,  2.,  2.]])</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">print(E.size())</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">torch.Size([2, 7])</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure><h4 id="2、torch-softmax"><a href="#2、torch-softmax" class="headerlink" title="2、torch.softmax"></a>2、torch.softmax</h4><ul><li>功能：对<code>n</code>维输入张量运用<code>softmax</code>函数，将张量的每个元素缩放到（<code>0, 1</code>）区间且和为<code>1</code>。</li></ul><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">公式：<span class="function"><span class="title">softmax</span>(<span class="variable">x_i</span>)= <span class="title">exp</span>(<span class="variable">x_i</span>) / ∑<span class="variable">_j</span> <span class="title">exp</span>(<span class="variable">x_j</span>)</span></span><br></pre></td></tr></table></figure><ul><li>参数：<code>torch.softmax(input, dim, dtype=None) -&gt; Tensor</code><ul><li><code>input</code> - 输入</li><li><code>dim</code> - 按照哪个维度进行操作</li><li><code>dtype</code> - 返回张量的所需数据类型。如果指定，则在执行操作之前将输入张量强制转换为<code>dtype</code>类型s。这对于防止数据类型溢出很有用。</li></ul></li><li>等价函数：<code>nn.functional.softmax</code>。此外，<code>nn.functional.softmax</code>与<code>nn.functional.softmin</code>的关系为：<code>softmin(x, ...) = softmax(-x, ...)</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">a = torch.rand(<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">b = torch.softmax(a, dim=<span class="number">0</span>)    <span class="comment"># 按第一维度</span></span><br><span class="line">b.sum()                        <span class="comment"># 20.0 = 4 * 5</span></span><br><span class="line"></span><br><span class="line">c = torch.softmax(a, dim=<span class="number">1</span>)    <span class="comment"># 按第二维度</span></span><br><span class="line">c.sum()                        <span class="comment"># 15.0 = 3 * 5</span></span><br><span class="line"></span><br><span class="line">d = torch.softmax(a, dim=<span class="number">2</span>)    <span class="comment"># 按第三维度</span></span><br><span class="line">d.sum()                        <span class="comment"># 12.0 = 3 * 4</span></span><br></pre></td></tr></table></figure><h4 id="3、torch-max"><a href="#3、torch-max" class="headerlink" title="3、torch.max"></a>3、torch.max</h4><ul><li>功能：求最大值</li><li>参数：<code>torch.max</code>参数形式多种多样，下面直接上代码。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 第一种形式：torch.max(input) -&gt; Tensor: 返回输入tensor中所有元素的最大值</span></span><br><span class="line"><span class="comment"># 第一种形式适用于数据维度为1的Tensor</span></span><br><span class="line">a = torch.randn(<span class="number">1</span>, <span class="number">3</span>)</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">tensor([[0.0869, 0.6224, 0.8762]])</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="comment"># 下面两种用法等价</span></span><br><span class="line">torch.max(a)</span><br><span class="line">a.max()</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">tensor(0.8762)</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第二种形式：torch.max(input, dim, keepdim=False, out=None) -&gt; (Tensor, LongTensor): 按维度dim返回最大值，并且返回索引</span></span><br><span class="line"><span class="comment"># 第二种形式适用于数据维度大于1的Tensor</span></span><br><span class="line">a = torch.randn(<span class="number">3</span>, <span class="number">5</span>)</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">tensor([</span></span><br><span class="line"><span class="string">        [-0.7206,  0.1179,  0.9897, -0.1577,  1.2655],</span></span><br><span class="line"><span class="string">        [-1.8731, -2.6412,  1.2925, -1.6880, -0.8795],</span></span><br><span class="line"><span class="string">        [ 0.6755, -0.1600,  0.7735,  1.0361, -0.4244]</span></span><br><span class="line"><span class="string">       ]</span></span><br><span class="line"><span class="string">)</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="comment"># 下面两种用法等价</span></span><br><span class="line">torch.max(a, dim=<span class="number">0</span>)    <span class="comment"># 返回a的每一列中最大值的那个元素，并且返回索引（最大元素在该列的行索引）</span></span><br><span class="line">a.max(dim=<span class="number">0</span>)</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">torch.return_types.max(</span></span><br><span class="line"><span class="string">  values=tensor([0.6755, 0.1179, 1.2925, 1.0361, 1.2655]),</span></span><br><span class="line"><span class="string">  indices=tensor([2, 0, 1, 2, 0])</span></span><br><span class="line"><span class="string">)</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="comment"># 下面两种用法等价</span></span><br><span class="line">torch.max(a, dim=<span class="number">1</span>)    <span class="comment"># 返回每一行中最大值的那个元素，并且返回索引（最大元素在该行的列索引）</span></span><br><span class="line">a.max(dim=<span class="number">1</span>)</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">torch.return_types.max(</span></span><br><span class="line"><span class="string">  values=tensor([1.2655, 1.2925, 1.0361]),</span></span><br><span class="line"><span class="string">  indices=tensor([4, 2, 3])</span></span><br><span class="line"><span class="string">)</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第三种形式：torch.max(input, other, out=None) → Tensor: 将input的每个元素与other的每个元素进行比较，并获取对应元素的最大值</span></span><br><span class="line">a = torch.randn(<span class="number">3</span>)</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">tensor([ 1.1644, -1.1396, -0.3495])</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">b = torch.randn(<span class="number">3</span>)</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">tensor([-0.0084, -0.8096, -1.8770])</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="comment"># 下面两种用法等价</span></span><br><span class="line">torch.max(a, b)</span><br><span class="line">a.max(b)</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">tensor([ 1.1644, -0.8096, -0.3495])</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="comment"># 参数out的使用</span></span><br><span class="line">c = torch.randn(<span class="number">3</span>)</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">tensor([[-8.0264e-01, -1.3355e-01, -5.3379e-01],</span></span><br><span class="line"><span class="string">        [-5.6208e-01, -7.2950e-01,  4.4337e-04]])</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="comment"># 下面将初始化后的c传给参数out</span></span><br><span class="line"><span class="comment"># a.max(b, out=c) 很可惜这种用法是错误的</span></span><br><span class="line">torch.max(a, b, out=c)</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">tensor([ 1.1644, -0.8096, -0.3495])</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">c</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">tensor([ 1.1644, -0.8096, -0.3495])</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure><h4 id="4、torch-matmul"><a href="#4、torch-matmul" class="headerlink" title="4、torch.matmul"></a>4、torch.matmul</h4><ul><li>功能：两个<code>Tensor</code>的矩阵乘积<ul><li>如果两个张量都是一维的，则返回点积（标量）。</li><li>如果两个参数都是二维的，则返回矩阵矩阵乘积。</li><li>如果第一个参数是一维的，第二个参数是二维的，则为了矩阵乘法，会将<code>1</code>附加到其维上。 矩阵相乘后，将删除前置尺寸。</li><li>如果第一个参数为二维，第二个参数为一维，则返回矩阵向量乘积。</li><li>如果两个参数至少为一维且至少一个参数为<code>N</code>维（其中<code>N &gt; 2</code>），则返回批处理矩阵乘法。 如果第一个参数是一维的，则将<code>1</code>附加到其维的前面，以实现批量矩阵乘法并在之后将其删除。 如果第二个参数是一维的，则将<code>1</code>附加到其维上，以实现成批矩阵倍数的目的，然后将其删除。 广播非矩阵（即批量）尺寸（因此必须是可广播的）。 例如，如果<code>tensor1</code>是一个<code>j * 1 * n * m</code>张量，而<code>tensor2</code>是一个<code>k * m * p</code>张量 ，<code>out</code>将是一个<code>j * k * n * p</code>张量。</li><li>特殊说明：此函数的一维点积版本不支持out参数。</li></ul></li><li>参数：<code>torch.matmul(tensor1, tensor2, out=None) -&gt; Tensor</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># vector x vector</span></span><br><span class="line">tensor1 = torch.randn(<span class="number">3</span>)</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">tensor([ 1.8494,  0.5536, -0.6468])</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">tensor2 = torch.randn(<span class="number">3</span>)</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">tensor([-0.8305,  0.8644,  1.6805])</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">out1 = torch.matmul(tensor1, tensor2)</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">tensor(-2.1444)</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">out1.size()    <span class="comment"># torch.Size([])</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># matrix x vector</span></span><br><span class="line">tensor1 = torch.randn(<span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">tensor([[-1.8240, -0.2426,  0.1950],</span></span><br><span class="line"><span class="string">        [ 0.7638,  0.5513,  0.6574]])</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">tensor2 = torch.randn(<span class="number">3</span>)</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">tensor([ 2.6653, -0.6907, -1.0048])</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">out2 = torch.matmul(tensor1, tensor2)</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">tensor([-4.8898,  0.9943])</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">out2.size()    <span class="comment"># torch.Size([2])</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># batched matrix x broadcasted vector</span></span><br><span class="line">tensor1 = torch.randn(<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">tensor([[[ 0.4646, -0.3542, -0.4162,  0.9695],</span></span><br><span class="line"><span class="string">         [-0.8727, -0.2083,  0.4785, -0.2714],</span></span><br><span class="line"><span class="string">         [ 0.1040,  0.0223,  0.6694,  0.2081]],</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        [[ 0.0342,  0.6797,  0.1041,  0.2584],</span></span><br><span class="line"><span class="string">         [ 1.2197, -0.0527,  0.2257, -0.2181],</span></span><br><span class="line"><span class="string">         [ 0.5351, -0.4489,  1.0773, -0.7290]]])</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">tensor2 = torch.randn(<span class="number">4</span>)</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">tensor([-0.8732,  0.4340, -0.0259, -1.0697])</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">out3 = torch.matmul(tensor1, tensor2)</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">tensor([[-1.5858,  0.9496, -0.3210],</span></span><br><span class="line"><span class="string">        [-0.0139, -0.8605,  0.0897]])</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">out3.size()    <span class="comment"># torch.Size([2, 3])</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># batched matrix x batched matrix</span></span><br><span class="line">tensor1 = torch.randn(<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">tensor([[[ 0.2000, -0.4825, -0.7185, -1.3646],</span></span><br><span class="line"><span class="string">         [-0.5794,  0.2120, -0.6846,  0.5934],</span></span><br><span class="line"><span class="string">         [ 0.6878, -0.4518,  0.3488,  0.6403]],</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        [[-0.0343,  0.3466, -0.1121,  0.0960],</span></span><br><span class="line"><span class="string">         [ 0.3094, -0.2938,  0.2268,  2.3415],</span></span><br><span class="line"><span class="string">         [-1.0912, -0.1234,  0.2138, -0.2986]]])</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">tensor2 = torch.randn(<span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">tensor([[[ 1.2469,  1.8608, -1.4570,  1.3764, -0.5992],</span></span><br><span class="line"><span class="string">         [ 1.9509,  0.5753, -0.0474,  1.2114, -0.6343],</span></span><br><span class="line"><span class="string">         [-0.1532, -0.2731, -1.3994,  0.1396,  0.7014],</span></span><br><span class="line"><span class="string">         [-0.2999, -0.6731,  0.3045, -0.7650,  1.9970]],</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        [[ 3.4708, -0.5726, -0.4660, -0.1092, -2.4764],</span></span><br><span class="line"><span class="string">         [-0.5269, -0.6579, -0.6195,  1.1899,  0.1086],</span></span><br><span class="line"><span class="string">         [ 1.0990,  0.7633, -0.8667,  2.8979, -0.2838],</span></span><br><span class="line"><span class="string">         [-1.3031, -1.0600,  0.3671, -0.1654, -0.3068]]])</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">out4 = torch.matmul(tensor1, tensor2)</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">tensor([[[-0.1727,  1.2093,  0.3215,  0.6343, -3.0429],</span></span><br><span class="line"><span class="string">         [-0.3818, -1.1685,  1.9728, -1.0901,  0.9174],</span></span><br><span class="line"><span class="string">         [-0.2692,  0.4937, -1.2739, -0.0417,  1.3978]],</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        [[-0.5500, -0.3957, -0.0663,  0.0755,  0.1250],</span></span><br><span class="line"><span class="string">         [-1.5734, -2.2927,  0.7007, -0.1134, -1.5808],</span></span><br><span class="line"><span class="string">         [-3.0981,  1.1858,  0.2900,  0.6414,  2.7197]]])</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">out4.size()    <span class="comment"># torch.Size([2, 3, 5])</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># batched matrix x broadcasted matrix</span></span><br><span class="line">tensor1 = torch.randn(<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">tensor([[[ 0.1971, -0.0891,  0.4463, -0.0757],</span></span><br><span class="line"><span class="string">         [ 0.6094, -1.5829,  0.1119,  2.4246],</span></span><br><span class="line"><span class="string">         [ 0.2037, -0.4761, -0.9985, -1.2255]],</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        [[-1.9552,  0.9290,  0.0167,  1.4487],</span></span><br><span class="line"><span class="string">         [-0.7659,  0.2061, -0.4865, -0.6649],</span></span><br><span class="line"><span class="string">         [-1.4712, -0.9761, -1.4641,  1.6674]]])</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">tensor2 = torch.randn(<span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">tensor([[ 1.0226, -0.1598,  0.2231,  0.6706,  0.4869],</span></span><br><span class="line"><span class="string">        [-1.1625, -0.6950,  0.2587,  0.1629,  0.7529],</span></span><br><span class="line"><span class="string">        [-1.9599,  0.6648, -0.4378,  0.7817, -0.9189],</span></span><br><span class="line"><span class="string">        [-1.3652, -1.4711, -0.5887, -0.1763, -0.1176]])</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">out5 = torch.matmul(tensor1, tensor2)</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">tensor([[[-0.4661,  0.4386, -0.1299,  0.4799, -0.3723],</span></span><br><span class="line"><span class="string">         [-1.0661, -2.4897, -1.7498, -0.1892, -1.2829],</span></span><br><span class="line"><span class="string">         [ 4.3918,  1.4374,  1.0808, -0.5054,  0.8024]],</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        [[-5.0898, -2.4533, -1.0560, -1.4023, -0.4382],</span></span><br><span class="line"><span class="string">         [ 0.8385,  0.6340,  0.4868, -0.7431,  0.3074],</span></span><br><span class="line"><span class="string">         [ 0.2232, -2.5129, -0.9214, -2.5841, -0.3018]]])</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">out5.size()    <span class="comment"># torch.Size([2, 3, 5])</span></span><br></pre></td></tr></table></figure><ul><li><code>nn.mm</code>、<code>bmm</code>、<code>matmul</code>的区别<ul><li><code>mm</code>只能进行矩阵乘法，也就是输入的两个<code>Tensor</code>维度只能是<code>n * m</code>和<code>m * p</code>。</li><li><code>bmm</code>是两个三维张量相乘，两个输入<code>Tensor</code>维度是<code>b * n * m</code>和<code>b * m * p</code>，第一维<code>b</code>代表<code>batch size</code>，输出为<code>b * n * p</code>。</li><li><code>matmul</code>可以进行张量乘法，输入可以是高维。</li></ul></li></ul><h4 id="5、torch-transpose"><a href="#5、torch-transpose" class="headerlink" title="5、torch.transpose"></a>5、torch.transpose</h4><ul><li>功能：对给定的两个维度进行交换，即转置。</li><li>参数：<code>torch.transpose(input, dim0, dim1) -&gt; Tensor</code><ul><li><code>input</code> - 输入<code>Tensor</code></li><li><code>dim0</code> - 要转置的第一个维度</li><li><code>dim1</code> - 要转置的第二个维度</li></ul></li><li>等价函数：<code>input.transpose(dim0, dim1) -&gt; Tensor</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">x = torch.randn(<span class="number">2</span>, <span class="number">3</span>) </span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">tensor([[-0.7663, -0.7615,  0.8212],</span></span><br><span class="line"><span class="string">        [-0.3898,  2.8783,  0.6284]])</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">y = torch.transpose(x, <span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">tensor([[-0.7663, -0.3898],</span></span><br><span class="line"><span class="string">        [-0.7615,  2.8783],</span></span><br><span class="line"><span class="string">        [ 0.8212,  0.6284]])</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">y.size()</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">torch.Size([3, 2])</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure><h4 id="6、torch-diag"><a href="#6、torch-diag" class="headerlink" title="6、torch.diag"></a>6、torch.diag</h4><ul><li>功能：<ul><li>如果输入是向量（一维张量），则返回二维张量，其中对角线为输入元素，其他位置补<code>0</code>。</li><li>如果输入是一个矩阵（二维张量），则返回带有输入对角线元素的一维张量。</li></ul></li><li>参数：<code>torch.diag(input, diagonal=0, out=None) -&gt; Tensor</code><ul><li><code>input</code> - 输入的<code>Tensor</code></li><li><code>diagonal</code> - 控制要考虑的对角线<ul><li>如果<code>diagonal = 0</code>，则它是主对角线。</li><li>如果<code>diagonal &gt; 0</code>，则它在主对角线的上方。</li><li>如果<code>diagonal &lt; 0</code>，则它在主对角线的下方。</li></ul></li><li><code>out</code> - 输出<code>Tensor</code></li></ul></li><li>等价函数：<code>input.diag(diagonal=0) -&gt; Tensor</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 输入为一维</span></span><br><span class="line">a = torch.randn(<span class="number">3</span>)</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">tensor([-0.9143,  0.8145, -0.4183])</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">torch.diag(a)</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">tensor([[-0.9143,  0.0000,  0.0000],</span></span><br><span class="line"><span class="string">        [ 0.0000,  0.8145,  0.0000],</span></span><br><span class="line"><span class="string">        [ 0.0000,  0.0000, -0.4183]])</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输入为二维</span></span><br><span class="line">a = torch.randn(<span class="number">3</span>, <span class="number">3</span>)</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">tensor([[ 1.2684, -0.3250,  0.1181],</span></span><br><span class="line"><span class="string">        [-1.9156, -0.1388,  0.1666],</span></span><br><span class="line"><span class="string">        [ 1.5203, -1.4330,  0.4376]])</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">torch.diag(a)</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">tensor([ 1.2684, -0.1388,  0.4376])</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure><h4 id="7、torch-squeeze-与-torch-unsqueeze"><a href="#7、torch-squeeze-与-torch-unsqueeze" class="headerlink" title="7、torch.squeeze 与 torch.unsqueeze"></a>7、torch.squeeze 与 torch.unsqueeze</h4><ul><li>功能：<ul><li><code>squeeze</code>表示压缩，<code>torch.squeeze</code>函数将输入的Tensor中，所有维度为<code>1</code>的维度都进行（删除）。<ul><li>例如，如果输入的形状为：<code>A * 1 * B * C * 1 * D，则张量将为以下形状：</code>A * B * C * D`。</li><li>如果指定了<code>dim</code>，则仅在给定维度上执行挤压操作。 例如，如果输入的形状为：<code>A * 1 * B</code>，则<code>squeeze(input, 0)</code>保持张量不变，但是<code>squeeze(iinput, 1)</code>会将张量压缩为形状<code>A * B</code>。</li></ul></li><li><code>unsqueeze</code>表示扩张，<code>torch.unsqueeze</code>函数在指定维度增加一个<code>1</code>维的维度。<ul><li>可以使用<code>[-input.dim() - 1，input.dim() + 1]</code>范围内的调光值。 负的<code>dim</code>将对应于在<code>dim = dim + input.dim() ) + 1</code>处应用的<code>unsqueeze</code>。</li></ul></li></ul></li><li>参数：<ul><li><code>torch.squeeze(input, dim=None, out=None) -&gt; Tensor</code><ul><li><code>input</code> - 输入<code>Tensor</code></li><li><code>dim</code> - 如果给出，则仅在该维度上压缩<code>input</code>，否则对所有维度</li><li><code>out</code> - 输出<code>Tensor</code></li></ul></li><li><code>torch.unsqueeze(input, dim, out=None) -&gt; Tensor</code><ul><li><code>input</code> - 输入<code>Tensor</code></li><li><code>dim</code> - 要插入<code>1</code>维维度的索引</li><li><code>out</code> - 输出<code>Tensor</code></li></ul></li></ul></li><li>等价函数：<ul><li><code>input.squeeze(dim=None) -&gt; Tensor</code></li><li><code>input.unsqueeze(dim) -&gt; Tensor</code></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># torch.squeeze</span></span><br><span class="line">x = torch.zeros(<span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">x.size()</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">torch.Size([2, 1, 2, 1, 2])</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">y = torch.squeeze(x)</span><br><span class="line">y.size()</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">torch.Size([2, 2, 2])</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">z = torch.squeeze(x, <span class="number">0</span>)</span><br><span class="line">z.size()</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">torch.Size([2, 1, 2, 1, 2])</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">z = torch.squeeze(x, <span class="number">1</span>)</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">torch.Size([2, 2, 1, 2])</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># torch.unsqueeze</span></span><br><span class="line">x = torch.tensor([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])</span><br><span class="line">x.size()</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">torch.Size([4])</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">y = torch.unsqueeze(x, <span class="number">0</span>)</span><br><span class="line">y.size()</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">torch.Size([1, 4])</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure><h4 id="8、torch-eq"><a href="#8、torch-eq" class="headerlink" title="8、torch.eq"></a>8、torch.eq</h4><ul><li>功能：按元素计算是否相等。<ul><li>第二个参数可以是数字或张量，其形状可与第一个参数一起广播。</li><li>返回值：每个相同的位置置<code>1</code>，其他位置置<code>0</code>的<code>ByteTensor</code>。</li></ul></li><li>参数：<code>torch.eq(input, other, out=None) -&gt; Tensor</code><ul><li><code>input</code> - 要比较的<code>Tensor</code></li><li><code>other</code> - 要比较的<code>Tensor</code>或<code>value</code></li><li><code>out</code> - 输出张量。必须是<code>ByteTensor</code></li></ul></li><li>等价函数：<code>input.eq(other) -&gt; Tensor</code></li><li>相似函数：<code>torch.equal(tensor1, tensor2) -&gt; bool</code><ul><li>如果两个<code>Tensor</code>具有相同的大小和元素，则为<code>True</code>，否则为<code>False</code>。</li><li>等价函数：<code>tensor1.equal(tensor2) -&gt; bool</code></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># torch.eq 示例</span></span><br><span class="line">a = torch.tensor([[<span class="number">1</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>]])</span><br><span class="line">b = torch.tensor([[<span class="number">1</span>, <span class="number">1</span>], [<span class="number">4</span>, <span class="number">4</span>]])</span><br><span class="line">torch.eq(a, b)</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">tensor([[ 1,  0],</span></span><br><span class="line"><span class="string">        [ 0,  1]], dtype=torch.uint8)</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># torch.equal 示例</span></span><br><span class="line">torch.equal(a, b)</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">False</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">c = torch.tensor([[<span class="number">1</span>, <span class="number">2</span>], [<span class="number">1</span>, <span class="number">2</span>]])</span><br><span class="line">torch.equal(a, c)</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">True</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure><h4 id="9、torch-sqrt"><a href="#9、torch-sqrt" class="headerlink" title="9、torch.sqrt"></a>9、torch.sqrt</h4><ul><li>功能：返回具有输入元素的平方根的新<code>Tensor</code>。</li><li>参数：<code>torch.sqrt(input, out=None) -&gt; Tensor</code></li><li>等价函数：<code>input.sqrt() -&gt; Tensor</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">a = torch.randn(<span class="number">4</span>)</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">tensor([-2.0755,  1.0226,  0.0831,  0.4806])</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">torch.sqrt(a)</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">tensor([    nan,  1.0112,  0.2883,  0.6933])</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure><h3 id="三、保存与加载模型"><a href="#三、保存与加载模型" class="headerlink" title="三、保存与加载模型"></a>三、保存与加载模型</h3><h4 id="1、简单的保存与加载"><a href="#1、简单的保存与加载" class="headerlink" title="1、简单的保存与加载"></a>1、简单的保存与加载</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 保存整个网络模型</span></span><br><span class="line">torch.save(net, PATH) </span><br><span class="line"><span class="comment"># 加载整个模型</span></span><br><span class="line">model = torch.load(PATH)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 保存网络中的参数, 速度快，占空间少</span></span><br><span class="line">torch.save(net.state_dict(),PATH)</span><br><span class="line"><span class="comment"># 加载模型</span></span><br><span class="line">model = CnnLstm(data, conf)              <span class="comment"># 先定义模型</span></span><br><span class="line">model.load_state_dict(torch.load(PATH))  <span class="comment"># 再加载训练好的模型参数</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Pytorch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安装pyenv</title>
      <link href="/2020/03/08/%E5%AE%89%E8%A3%85pyenv/"/>
      <url>/2020/03/08/%E5%AE%89%E8%A3%85pyenv/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p><strong>pyenv</strong> 是一个 python 解释器<strong>版本管理工具</strong>。很多时候不同的项目需要不同的 python 版本，手动安装或者切换版本很容易冲突，因此需要采用管理工具对其加以管理。</p><a id="more"></a><hr><h3 id="centos-安装"><a href="#centos-安装" class="headerlink" title="centos 安装"></a>centos 安装</h3><p>安装和配置：</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建目录</span></span><br><span class="line">$ mkdir ~<span class="string">/.pyenv</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># git 安装</span></span><br><span class="line">$ git clone git:<span class="string">//github.com/yyuu/pyenv.git</span> ~<span class="string">/.pyenv</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置环境变量</span></span><br><span class="line"><span class="keyword">echo</span> 'export PYENV_ROOT=<span class="string">"$HOME/.pyenv"</span>' &gt;&gt; ~<span class="string">/.bashrc</span>  </span><br><span class="line"><span class="keyword">echo</span> 'export PATH=<span class="string">"$PYENV_ROOT/bin:$PATH"</span>' &gt;&gt; ~<span class="string">/.bashrc</span>  </span><br><span class="line"><span class="keyword">echo</span> 'eval <span class="string">"$(pyenv init -)"</span>' &gt;&gt; ~<span class="string">/.bashrc</span>  </span><br><span class="line">exec $SHELL -l</span><br></pre></td></tr></table></figure><hr><h3 id="ubuntu-安装"><a href="#ubuntu-安装" class="headerlink" title="ubuntu 安装"></a>ubuntu 安装</h3><p>直接安装 pyenv：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ curl https://pyenv.<span class="keyword">run</span><span class="bash"> | bash</span></span><br></pre></td></tr></table></figure><p>默认安装路径为：<strong>~/.pyenv/</strong></p><hr><h3 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a>常用操作</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 列出所有可安装版本</span></span><br><span class="line"><span class="string">$</span> <span class="string">pyenv</span> <span class="string">install</span> <span class="string">--list</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 python3.6.6</span></span><br><span class="line"><span class="string">$</span> <span class="string">pyenv</span> <span class="string">install</span> <span class="number">3.6</span><span class="number">.6</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 python3.5.6</span></span><br><span class="line"><span class="string">$</span> <span class="string">pyenv</span> <span class="string">install</span> <span class="number">3.5</span><span class="number">.6</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置全局使用</span></span><br><span class="line"><span class="string">$</span> <span class="string">pyenv</span> <span class="string">global</span> <span class="number">3.6</span><span class="number">.6</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置局部使用</span></span><br><span class="line"><span class="string">$</span> <span class="string">pyenv</span> <span class="string">local</span> <span class="number">3.5</span><span class="number">.6</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查当前路径版本</span></span><br><span class="line"><span class="string">$</span> <span class="string">python</span> <span class="string">--version</span></span><br></pre></td></tr></table></figure><p>如果在安装 python 的过程中，发生了错误，可能是缺少某些依赖。</p><h3 id="安装所需依赖"><a href="#安装所需依赖" class="headerlink" title="安装所需依赖"></a>安装所需依赖</h3><p>centos 安装 python 依赖：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum -y <span class="keyword">install </span>zlib-devel <span class="keyword">bzip2-devel </span>openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gdbm-devel db4-devel libpcap-devel xz-devel</span><br></pre></td></tr></table></figure><p>ubuntu 安装 python 依赖：</p><figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-<span class="built_in">get</span> install -y make build-essential libssl-<span class="built_in">dev</span> zlib1g-<span class="built_in">dev</span> libbz2-<span class="built_in">dev</span> \</span><br><span class="line">libreadline-<span class="built_in">dev</span> libsqlite3-<span class="built_in">dev</span> wget curl llvm libncurses5-<span class="built_in">dev</span> libncursesw5-<span class="built_in">dev</span> \</span><br><span class="line">xz-utils tk-<span class="built_in">dev</span> libffi-<span class="built_in">dev</span> liblzma-<span class="built_in">dev</span> python-openssl git</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux学习笔记</title>
      <link href="/2020/03/08/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/2020/03/08/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p><code>Linux</code>学习笔记，边学边记，以做备忘。</p><a id="more"></a><hr><h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><p>操作系统：centos7.5</p><hr><h3 id="查看-CPU-个数及核数"><a href="#查看-CPU-个数及核数" class="headerlink" title="查看 CPU 个数及核数"></a>查看 CPU 个数及核数</h3><p>总核数 = 物理 CPU 个数  Ｘ  没颗物理 CPU 的核数</p><p>总逻辑 CPU 数 = 物理 CPU 个数  X  每颗物理 CPU 的核数  X  超线程数</p><p>查看物理 CPU 个数：</p><figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cat /<span class="keyword">proc</span>/cpuinfo |<span class="title"> grep</span> "physical<span class="title"> id"</span> |<span class="title"> sort</span> |<span class="title"> uniq</span> |<span class="title"> wc</span> -l</span><br></pre></td></tr></table></figure><p>查看每个物理 CPU 的核数：</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cat /proc/cpuinfo | <span class="type">grep</span> <span class="string">"cpu cores"</span> | <span class="type">uniq</span></span><br></pre></td></tr></table></figure><p>查看逻辑 CPU 个数：</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cat /proc/cpuinfo | <span class="type">grep</span> <span class="string">"processor"</span> | <span class="type">wc</span> -l</span><br></pre></td></tr></table></figure><hr><h3 id="对外开放端口"><a href="#对外开放端口" class="headerlink" title="对外开放端口"></a>对外开放端口</h3><h4 id="查看对外开放的端口状态"><a href="#查看对外开放的端口状态" class="headerlink" title="查看对外开放的端口状态"></a>查看对外开放的端口状态</h4><p>提示 <strong>yes</strong> 表示开启，<strong>no</strong> 表示未开启</p><p>查询以开放的端口：</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>netstat -anp</span><br></pre></td></tr></table></figure><p>查询指定端口是否已开：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查询 10086 端口是否已开</span></span><br><span class="line">$ firewall-<span class="keyword">cmd</span><span class="bash"> --query-port=10086/tcp</span></span><br></pre></td></tr></table></figure><h4 id="查看防火墙状态"><a href="#查看防火墙状态" class="headerlink" title="查看防火墙状态"></a>查看防火墙状态</h4><p>查看防火墙的状态：</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>systemctl status firewalld</span><br></pre></td></tr></table></figure><p>开启防火墙：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 第一种方式</span></span><br><span class="line">$ systemctl start firewalld</span><br><span class="line"><span class="comment"># 第二种方式</span></span><br><span class="line">$<span class="built_in"> service </span>firewalld start</span><br></pre></td></tr></table></figure><ul><li>若遇到无法开启的情况，按执行即可：</li></ul><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>systemctl unmask firewalld.service </span><br><span class="line"><span class="variable">$ </span>systemctl start firewalld.service</span><br></pre></td></tr></table></figure><p>关闭防火墙：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 第一种方式</span></span><br><span class="line">$ systemctl stop firewalld</span><br><span class="line"><span class="comment"># 第二种方式</span></span><br><span class="line">$<span class="built_in"> service </span>firewalld stop</span><br></pre></td></tr></table></figure><h4 id="对外开发端口"><a href="#对外开发端口" class="headerlink" title="对外开发端口"></a>对外开发端口</h4><p>首先，查看想开的端口是否已开启：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查询 10086 端口是否已开</span></span><br><span class="line">$ firewall-<span class="keyword">cmd</span><span class="bash"> --query-port=10086/tcp</span></span><br></pre></td></tr></table></figure><p>添加指定需要开放的端口：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 开启 10086 端口</span></span><br><span class="line">$ firewall-<span class="keyword">cmd</span><span class="bash"> --add-port=10086/tcp --permanent</span></span><br></pre></td></tr></table></figure><p>重载添加的端口：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ firewall-<span class="keyword">cmd</span><span class="bash"> --reload</span></span><br></pre></td></tr></table></figure><p>查询指定端口是否开启成功：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查询 10086 端口是否已开</span></span><br><span class="line">$ firewall-<span class="keyword">cmd</span><span class="bash"> --query-port=10086/tcp</span></span><br></pre></td></tr></table></figure><h4 id="移除指定端口："><a href="#移除指定端口：" class="headerlink" title="移除指定端口："></a>移除指定端口：</h4><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 移除 10086 端口</span></span><br><span class="line">$ firewall-<span class="keyword">cmd</span><span class="bash"> --permanent --remove-port=10086/tcp</span></span><br></pre></td></tr></table></figure><hr><h3 id="更新-yum-源"><a href="#更新-yum-源" class="headerlink" title="更新 yum 源"></a>更新 yum 源</h3><p>将 yum 源设置为国内 yum 源，可以提升软件包安装和更新的速度，同时避免一些常见软件版本无法找到。</p><p>国内源：可以使用 wget 获取或者直接下载</p><p>网易的 yum 源：</p><p>centos5: <a href="http://mirrors.163.com/.help/CentOS5-Base-163.repo" target="_blank" rel="noopener">http://mirrors.163.com/.help/CentOS5-Base-163.repo</a></p><p>centos6: <a href="http://mirrors.163.com/.help/CentOS6-Base-163.repo" target="_blank" rel="noopener">http://mirrors.163.com/.help/CentOS6-Base-163.repo</a></p><p>centos7: <a href="http://mirrors.163.com/.help/CentOS7-Base-163.repo" target="_blank" rel="noopener">http://mirrors.163.com/.help/CentOS7-Base-163.repo</a></p><p>中科大的 yum 源：</p><p>centos5: <a href="https://lug.ustc.edu.cn/wiki/_export/code/mirrors/help/centos?codeblock=1" target="_blank" rel="noopener">https://lug.ustc.edu.cn/wiki/_export/code/mirrors/help/centos?codeblock=1</a></p><p>centos6: <a href="https://lug.ustc.edu.cn/wiki/_export/code/mirrors/help/centos?codeblock=2" target="_blank" rel="noopener">https://lug.ustc.edu.cn/wiki/_export/code/mirrors/help/centos?codeblock=2</a></p><p>centos7: <a href="https://lug.ustc.edu.cn/wiki/_export/code/mirrors/help/centos?codeblock=3" target="_blank" rel="noopener">https://lug.ustc.edu.cn/wiki/_export/code/mirrors/help/centos?codeblock=3</a></p><p>搜狐的 yum 源：<a href="http://mirrors.sohu.com/help/CentOS-Base-sohu.repo" target="_blank" rel="noopener">http://mirrors.sohu.com/help/CentOS-Base-sohu.repo</a></p><p>安装步骤：</p><p>1、首先备份 CentOS-Base.repo</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo mv /etc/yum.repos.d/CentOS-<span class="module-access"><span class="module"><span class="identifier">Base</span>.</span></span>repo /etc/yum.repos.d/CentOS-<span class="module-access"><span class="module"><span class="identifier">Base</span>.</span></span>repo.backup</span><br></pre></td></tr></table></figure><p>2、下载对应版本的CentOS-Base.repo, 放入/etc/yum.repos.d/</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ wget <span class="params">&lt;上面列出的 yum 源中对应自己系统的链接&gt;</span></span><br><span class="line">$ mv <span class="params">&lt;下载的文件名&gt;</span> <span class="meta-keyword">/etc/</span>yum.repos.d/</span><br></pre></td></tr></table></figure><p>3、运行以下命令生成缓存</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">$</span> yum clean <span class="keyword">all</span></span><br><span class="line"><span class="symbol">$</span> yum makecache</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux常用工具安装</title>
      <link href="/2020/03/08/Linux%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E5%AE%89%E8%A3%85/"/>
      <url>/2020/03/08/Linux%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>本文主要介绍在<code>centos</code>和<code>ubuntu</code>两种不同的<code>Linux</code>系统下常用命令的安装方法。</p><a id="more"></a><hr><h3 id="安装-tmux"><a href="#安装-tmux" class="headerlink" title="安装 tmux"></a>安装 tmux</h3><p><strong>centos</strong> 安装命令：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yum <span class="keyword">install</span> tmux</span><br></pre></td></tr></table></figure><p><strong>ubuntu</strong> 安装命令：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ apt-<span class="builtin-name">get</span> install tmux</span><br></pre></td></tr></table></figure><hr><h3 id="生成公钥秘钥"><a href="#生成公钥秘钥" class="headerlink" title="生成公钥秘钥"></a>生成公钥秘钥</h3><p>通过运行 <strong>ssh-keygen</strong> 程序生成。</p><p>在 Linux/Mac 系统中，ssh-keygen 随 SSH 软件包提供；在 Windows 上，该程序包含于 MSysGit 软件包中。</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>ssh-keygen</span><br></pre></td></tr></table></figure><p>首先，<strong>ssh-keygen</strong> 会确认密钥的存储位置（默认是 <strong>~/.ssh/</strong> 目录下），直接回车即可。</p><p>然后，会要求你输入两次密钥口令。如果你不想在使用密钥时输入口令，将其留空即可。</p><p>查看生成的公钥秘钥，存储位置为：<strong>.ssh/id_rsa</strong></p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>cd ~<span class="regexp">/.ssh/</span></span><br><span class="line">id_rsa    id_rsa.pub</span><br></pre></td></tr></table></figure><hr><h3 id="安装-git"><a href="#安装-git" class="headerlink" title="安装 git"></a>安装 git</h3><h4 id="1、安装"><a href="#1、安装" class="headerlink" title="1、安装"></a>1、安装</h4><p><strong>centos</strong> 安装命令：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum <span class="keyword">install</span> git</span><br></pre></td></tr></table></figure><p><strong>ubuntu</strong> 安装命令：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-<span class="builtin-name">get</span> install git</span><br></pre></td></tr></table></figure><h4 id="2、验证"><a href="#2、验证" class="headerlink" title="2、验证"></a>2、验证</h4><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="comment">--version</span></span><br></pre></td></tr></table></figure><h4 id="3、配置基本信息"><a href="#3、配置基本信息" class="headerlink" title="3、配置基本信息"></a>3、配置基本信息</h4><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置基本信息</span></span><br><span class="line">$ git<span class="built_in"> config </span>--global user.name <span class="string">"&lt;用户名&gt;"</span></span><br><span class="line">$ git<span class="built_in"> config </span>--global user.email <span class="string">"&lt;邮箱&gt;"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看配置</span></span><br><span class="line">$ git<span class="built_in"> config </span>--list</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安装Node和npm</title>
      <link href="/2020/03/08/%E5%AE%89%E8%A3%85Node/"/>
      <url>/2020/03/08/%E5%AE%89%E8%A3%85Node/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>本文主要介绍<code>Linux</code>系统下<code>node</code>和<code>npm</code>的安装方法。</p><a id="more"></a><hr><h3 id="操作系统：Linux"><a href="#操作系统：Linux" class="headerlink" title="操作系统：Linux"></a>操作系统：Linux</h3><hr><h3 id="1、在-Node-js-官网-找到需要下载的文件"><a href="#1、在-Node-js-官网-找到需要下载的文件" class="headerlink" title="1、在 Node.js 官网 找到需要下载的文件"></a>1、在 <a href="https://nodejs.org/en/download" target="_blank" rel="noopener">Node.js 官网</a> 找到需要下载的文件</h3><p><img src="http://39.106.162.242:8001/api/img?path=/5a/5313385be9c1121122ecf7ec883926.png" alt="nodejsaddress"></p><h3 id="2、下载"><a href="#2、下载" class="headerlink" title="2、下载"></a>2、下载</h3><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ wget https://nodejs.org/dist/v12.<span class="number">16.0</span>/<span class="keyword">node</span><span class="title">-v12</span>.<span class="number">16.0</span>-linux-x64.tar.xz</span><br></pre></td></tr></table></figure><p>当前目录就会出现一个名为：<strong>node-v12.16.0-linux-x64.tar.xz</strong> 的压缩包</p><h3 id="3、解压"><a href="#3、解压" class="headerlink" title="3、解压"></a>3、解压</h3><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo tar -xvf <span class="keyword">node</span><span class="title">-v8</span>.<span class="number">11.1</span>-linux-x64.tar.xz -C /opt/tools/</span><br></pre></td></tr></table></figure><p>将文件解压到指定目录：<strong>/opt/tools</strong>（即 -C 参数后的路径，该路径可以根据实际情况任意指定），因为该目录是根目录（“<strong>/</strong>”）下的，所以应该使用 <strong>root</strong> 权限，即使用了 <strong>sudo</strong> 标识需要 <strong>root</strong> 权限。</p><p>此时，<strong>Node.js 根目录</strong> 为：<strong>/opt/tools/node-v12.16.0</strong></p><h3 id="4、测试"><a href="#4、测试" class="headerlink" title="4、测试"></a>4、测试</h3><p>进入 <strong>Node.js 根目录/bin</strong>，执行 <strong>ls</strong> 命令：</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cd /opt/tools/<span class="keyword">node</span><span class="title">-v12</span>.<span class="number">16.0</span>/bin &amp;&amp; ls</span><br><span class="line">$ <span class="keyword">node</span> <span class="title">npm</span> npx</span><br></pre></td></tr></table></figure><p>测试一下：</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ./<span class="keyword">node</span> <span class="title">-v</span></span><br><span class="line">v12.<span class="number">16.0</span></span><br></pre></td></tr></table></figure><p>即 <strong>Node.js</strong> 的版本号为：<strong>v12.16.0</strong>。</p><h3 id="5、配置全局使用"><a href="#5、配置全局使用" class="headerlink" title="5、配置全局使用"></a>5、配置全局使用</h3><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ln -s /opt/tools/<span class="keyword">node</span><span class="title">-v12</span>.<span class="number">16.0</span>/bin/<span class="keyword">node</span> <span class="title">/user</span>/local/bin/<span class="keyword">node</span><span class="title"></span></span><br><span class="line"><span class="title">$</span> ln -s /opt/tools/<span class="keyword">node</span><span class="title">-v12</span>.<span class="number">16.0</span>/bin/npm /user/local/bin/npm</span><br></pre></td></tr></table></figure><p>即在 <strong>/usr/local/bin/</strong> 下添加 <strong>node</strong> 和 <strong>nmp</strong> 的软连接。</p><p>再测试一下：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ node -v</span><br><span class="line">v12<span class="number">.16</span><span class="number">.0</span></span><br><span class="line">$ npm -v</span><br><span class="line"><span class="number">6.13</span><span class="number">.4</span></span><br></pre></td></tr></table></figure><p>OK，大功告成。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hero+Github自建Blog</title>
      <link href="/2020/03/08/Hexo+Github%E8%87%AA%E5%BB%BABlog/"/>
      <url>/2020/03/08/Hexo+Github%E8%87%AA%E5%BB%BABlog/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>本文主要介绍使用<code>Hexo + Github</code>的方式搭建自己的博客。博客后续的美化以及其他自定义功能，可以参考：</p><ul><li><a href="[https://vic.kim/2019/05/25/Hexo%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%96%E4%B9%8BNext%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96/](https://vic.kim/2019/05/25/Hexo博客优化之Next主题美化/)">Hexo博客优化之Next主题美化</a></li><li><a href="https://www.jianshu.com/p/78c218f9d1e7" target="_blank" rel="noopener">Hexo-设置阅读全文</a></li><li><a href="http://blog.shenyuanluo.com/HexoConfig1.html" target="_blank" rel="noopener">Hexo的Next主题个性化设置（一）——基础设置</a></li><li><a href="https://theme-next.iissnan.com/getting-started.html" target="_blank" rel="noopener">Next使用文档</a></li><li><a href="https://juejin.im/post/5c7dd7566fb9a049d05e784e" target="_blank" rel="noopener">Hexo博客NexT主题美化之显示当前浏览进度</a></li><li><a href="https://juejin.im/post/5c7d4700e51d4541d82d8b6b" target="_blank" rel="noopener">Hexo博客NexT主题美化之顶部加载进度条</a></li><li><a href="https://asdfv1929.github.io/2018/01/20/gitalk/" target="_blank" rel="noopener">Hexo NexT主题中集成gitalk评论系统</a></li></ul><p>上述几篇文章有重合的地方，可以都看一看，能加深对<code>Hexo</code>的理解。</p><a id="more"></a><hr><h3 id="操作系统：Linux"><a href="#操作系统：Linux" class="headerlink" title="操作系统：Linux"></a>操作系统：Linux</h3><hr><h3 id="安装-Hexo"><a href="#安装-Hexo" class="headerlink" title="安装 Hexo"></a>安装 Hexo</h3><p>安装 Hexo之前，应该首先确保已经存在 Node.js 和 npm，具体版本以安装为主：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ node -v</span><br><span class="line">v8<span class="number">.11</span><span class="number">.4</span></span><br><span class="line">$ npm -v</span><br><span class="line"><span class="number">6.13</span><span class="number">.7</span></span><br></pre></td></tr></table></figure><p>安装 Node.js 请参考：<a href="http://lswjkl.com/2020/02/16/安装Node/" target="_blank" rel="noopener">安装 Node.js</a></p><p><strong>npm</strong> 是 Node.js 的<strong>子命令</strong>，安装好 Node.js 就可使用 <strong>npm</strong></p><p>接下来开始正式安装 Hexo。</p><p>首先，创建一个目录，任意命名，用于保存所有 Hexo 相关的文档。我创建的目录名为 Blog：</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir ~<span class="string">/Blog</span></span><br><span class="line">$ <span class="keyword">cd</span> ~<span class="string">/Blog</span></span><br></pre></td></tr></table></figure><p>安装 Hexo 命令：</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># 安装 Hexo</span></span><br><span class="line">$ npm install hexo-<span class="keyword">cli</span> -g</span><br></pre></td></tr></table></figure><p>升级 Hexo 版本命令：</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">npm</span> update hexo -g</span><br></pre></td></tr></table></figure><p>将 hexo 命令添加到全局：在 Node.js 的 lib/node_modules/hexo-cli/bin 可以找到hexo命令：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ln -s <span class="params">&lt;Node.js主目录&gt;</span><span class="meta-keyword">/lib/</span>node_modules<span class="meta-keyword">/hexo-cli/</span>bin/hexo <span class="meta-keyword">/usr/</span>local<span class="meta-keyword">/bin/</span>hexo</span><br></pre></td></tr></table></figure><p>初始化 Hexo 框架，创建一个 <strong>Hexo 实例</strong>，下面介绍以下<strong>实例化命令</strong>的使用方法，其实质就是将管理在 Github上的 <a href="https://github.com/hexojs/hexo" target="_blank" rel="noopener">Hexo 项目</a> 下载到本地：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init <span class="tag">&lt;<span class="name">实例名称</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>&lt;实例名称&gt; 可以写，也可以不写</li><li>&lt;实例名称&gt; 如果存在，hexo 会在当前目录下创建一个新的名为 &lt;实例名称&gt; 的目录，该目录下保存新创建的 <strong>Hexo 实例</strong>的相关文件</li><li>&lt;实例名称&gt; 如果不存在，新创建的 <strong>Hexo 实例</strong>的相关文件直接保存在当前目录</li></ul><p>最后，使用以下命令创建 <strong>Hexo 实例</strong>，并 <strong>切换工作目录</strong> 至：<strong>~/Blog/lswjkl/</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hexo init lswjkl</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> lswjkl</span></span><br></pre></td></tr></table></figure><p>至此，Hexo 安装结束，接下来熟悉几个 Hexo 中的常用命令：</p><ul><li>hexo n “<Blog Name>”     # 等价于：hexo new “<Blog Name>”，用于新建文章</li><li>hexo g    # 等价于：hexo generate，用于生成服务器需要的相关文件，可以理解为更新 Hexo 实例的内容</li><li>hexo d    # 等价于：hexo deploy，用于部署 Hexo 实例到服务器。当 Hexo 与 Github 关联后，该命令还负责将部署文件同步到 Github 库</li><li>hexo s    # 等价于：hexo server，启动服务预览<ul><li>hexo server                          # Hexo会监视文件变动并自动更新，无须重启服务器</li><li>hexo server -s                      # 静态模式</li><li>hexo server -p 5000             # 更改端口</li><li>hexo server -i 192.168.1.1    # 自定义 IP</li><li>hexo clean                            # 清除缓存，若是网页正常情况下可以忽略这条命令</li></ul></li></ul><hr><h3 id="创建-Github-库"><a href="#创建-Github-库" class="headerlink" title="创建 Github 库"></a>创建 Github 库</h3><p>创建 Github 库，首先得有一个 Github 账户。</p><p>进入 <a href="https://github.com/" target="_blank" rel="noopener">Github官网</a>，注册一个账号：</p><p><img src="http://q5ks899to.bkt.clouddn.com/github-with-hexo-for-blog_1.png" alt="newgithub"></p><p>登录到 GitHub，创建新仓库，仓库名应该为：<strong>用户名</strong>.github.io，<strong>用户名</strong>使用自己的 GitHub 帐号名称代替，这是固定写法，比如我的仓库名为：<a href="http://www.lswjkl.com" target="_blank" rel="noopener">lswjkllc.github.io</a>，如下图所示：</p><p><img src="http://q5ks899to.bkt.clouddn.com/github-with-hexo-for-blog_2.png" alt="newrepo"></p><p>在 Github 中添加本地 SSH 公钥，其中<strong>公钥名称</strong>可以任意命名：</p><p><img src="http://q5ks899to.bkt.clouddn.com/github-with-hexo-for-blog_3.png" alt="addsshpub"></p><p>SSH 公钥，如下所示，~/.ssh/<strong>id_rsa.pub</strong> 即为 SHH 公钥所在文件：</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>cd ~<span class="regexp">/.ssh/</span></span><br><span class="line">id_rsa    id_rsa.pub</span><br></pre></td></tr></table></figure><p>如果 <strong>~/.ssh/</strong> 目录不存在，请参考：[Linux 常用工具安装]](<a href="http://lswjkl.com/2020/02/16/Linux常用工具安装/)。id_rsa" target="_blank" rel="noopener">http://lswjkl.com/2020/02/16/Linux常用工具安装/)。id_rsa</a> 与 id_rsa.pub 分别为 私钥 和 公钥。</p><p>至此，创建 Github 库完毕。</p><hr><h3 id="关联-Hexo-和-Github"><a href="#关联-Hexo-和-Github" class="headerlink" title="关联 Hexo 和 Github"></a>关联 Hexo 和 Github</h3><p>接下来将 <strong>Hexo 实例</strong> 与 <strong>新建的 Github 库</strong>关联起来。</p><p>修改 <strong>Hexo 实例</strong> 的<strong>全局配置文件</strong>，即 <strong>blog目录</strong> 下的 <strong>_config.yml</strong> 文件，在文件的最后，即 <strong>Deployment</strong> 部分，配置如下信息：</p><p><img src="http://q5ks899to.bkt.clouddn.com/github-with-hexo-for-blog_4.png" alt="configgithub"></p><p>这一步的实质就是给 <strong>hexo d</strong> 这个命令做相应的配置，让 <strong>Hexo</strong> 知道我们要把博客部署在什么位置。</p><p>然后，安装 <strong>Git 部署插件</strong>，输入命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm <span class="keyword">install</span> hexo-deployer-git <span class="comment">--save</span></span><br></pre></td></tr></table></figure><p>最后，依次运行下面三条命令：</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>hexo clean</span><br><span class="line"><span class="variable">$ </span>hexo g</span><br><span class="line"><span class="variable">$ </span>hexo d</span><br></pre></td></tr></table></figure><p>其中 <strong>hexo g</strong> 和 *<em>hexo d *</em> 可以合并为一个命令：</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>hexo g -d</span><br></pre></td></tr></table></figure><p>现在，通过在浏览器中访问 <a href="lswjkllc.github.io">Github 库名</a><strong>（lswjkllc.github.io）</strong>，就可以访问自己的 Blog 啦。</p><p>至此，基于 <strong>Hexo</strong> 和 <strong>Github</strong> 搭建自己的 Blog 的雏形已经完毕。</p><hr><h3 id="发布文章"><a href="#发布文章" class="headerlink" title="发布文章"></a>发布文章</h3><p>开始正式发布上线博客文章，在命令行中输入：</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>hexo n <span class="string">"博客名字"</span></span><br></pre></td></tr></table></figure><p>此时，在 <strong>blog根目录</strong> 下的 <strong>source文件夹</strong> 中的 <strong>_post文件夹</strong> 中多了一个 <strong>博客名字.md</strong> 文件，使用 <strong>Markdown编辑器</strong> 打开，就可以开始你的个人博客之旅了，Markdown 常用的样式也就十来种，完全能够满足一般博文的样式要求。示例如下：</p><p><img src="http://q5ks899to.bkt.clouddn.com/github-with-hexo-for-blog_6.png" alt="markdownsample"></p><h3 id="配置主题"><a href="#配置主题" class="headerlink" title="配置主题"></a>配置主题</h3><p>如果你不喜欢 <strong>Hexo</strong> 默认的主题，可以更换不同的主题，主题传送门：<a href="https://link.zhihu.com/?target=https%3A//hexo.io/themes/">Themes</a> 我自己使用的是 <strong>next 主题</strong>，可以在 <strong>blog目录</strong> 中的 <strong>themes文件夹</strong> 中查看你自己主题是什么。现在把默认主题更改成 <strong>next</strong> 主题，在 <strong>blog目录</strong> 中（即当前工作目录）打开命令行输入：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git clone http<span class="variable">s:</span>//github.<span class="keyword">com</span>/iissnan/hexo-theme-<span class="keyword">next</span> themes/<span class="keyword">next</span></span><br></pre></td></tr></table></figure><p>这是将 <strong>next主题</strong> 下载到 <strong>blog目录</strong> 的 <strong>themes目录</strong> 下的 <strong>next文件夹</strong> 中。打开 <strong>blog目录</strong> 下的 <strong>_config.yml</strong> 配置文件，修改主题为 <strong>next</strong>，如下所示：</p><p><img src="http://q5ks899to.bkt.clouddn.com/github-with-hexo-for-blog_7.png" alt="settheme"></p><p>打开 <strong>themes/next</strong> 下的 <strong>_config.yml</strong> 配置文件，找到 <strong>Scheme Settings</strong>。<strong>next</strong> 一共有四种模式：<strong>Muse</strong>、<strong>Mist</strong>、<strong>Pisces</strong>、<strong>Gemini</strong>，选择你自己喜欢的样式（只需要把行首的 <strong>#</strong> 去除，<strong>#</strong> 是注释）：</p><p><img src="http://q5ks899to.bkt.clouddn.com/github-with-hexo-for-blog_8.png" alt="setthememode"></p><p>选择好后，再次部署网站，<strong>hexo clean</strong>、<strong>hexo g -d</strong>，查看效果。选择其他主题，按照上述过程即可实现。</p><h3 id="图床"><a href="#图床" class="headerlink" title="图床"></a>图床</h3><p>图床，当博文中有图片时，怎么样保存图片，可以参考：<a href="https://www.jianshu.com/p/280c6a6f2594" target="_blank" rel="noopener">MarkDown 添加图片的三种方式</a></p><p>编辑文章时，若是少量图片，可以直接把图片存放在 source 文件夹中，但这显然不合理的，因为图片会占据大量的存储的空间，加载的时候相对缓慢 。</p><p>这时考虑把博文里的图片上传到某一网站，然后获得外部链接，使用 Markdown 语法，<code>![图片信息](外部链接)</code> 完成图片的插入，这种网站就被成为图床。</p><p>常见的简易的图床网站有：<a href="https://link.zhihu.com/?target=http%3A//www.tietuku.com/">贴图库</a>、<a href="https://www.qiniu.com/products/kodo" target="_blank" rel="noopener">七牛云</a>。图床最重要的就是稳定速度快，所以在挑选图床的时候一定要仔细，下图是博文插入图片，使用图床外链的示例：</p><p><img src="http://39.106.162.242:8001/api/img?path=/2b/9ab6e8abf9dd8be0cb38d9f12bafe0.png" alt="picture-bedsample"></p><h3 id="个性化设计"><a href="#个性化设计" class="headerlink" title="个性化设计"></a>个性化设计</h3><p>待续…</p><h3 id="自定义域名"><a href="#自定义域名" class="headerlink" title="自定义域名"></a>自定义域名</h3><p>待续…</p>]]></content>
      
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
